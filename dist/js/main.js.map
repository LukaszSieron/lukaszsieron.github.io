{"version":3,"sources":["script.js"],"names":["let","playerPosition","x","y","score","directions","doors","north","east","south","west","roomEncounter","white_troll","green_troll","yellow_troll","gold","emerald","diamond","exit","initializeMaze","data","mazeSize","maze","rooms","getExitCoordinates","console","log","i","j","visited","getRandomInt","getDistance","startGame","handleUserInput","input","currentRoom","encounterType","encounter","updateMazeVisualization","includes","movePlayer","displayEncounter","direction","newX","newY","enterRoom","$","remove","append","renderMazeInConsole","max","Math","floor","random","pos1","pos2","abs","visualization","Array","join","room","empty","document","ready","ajax","url","type","dataType","success","keypress","e","which","this","val","toLowerCase","error","alert"],"mappings":"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","file":"main.js","sourcesContent":["// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\nconst roomEncounter = {\r\n    white_troll: '<img src=\"./dist/assets/monsters/white-troll.png\" alt=\"White troll\">',\r\n    green_troll: '<img src=\"./dist/assets/monsters/green-troll.png\" alt=\"Green troll\">',\r\n    yellow_troll: '<img src=\"./dist/assets/monsters/yellow-troll.png\" alt=\"Yellow troll\">',\r\n    gold: '<img src=\"./dist/assets/items/gold.png\" alt=\"Gold\">',\r\n    emerald: '<img src=\"./dist/assets/items/emerald.png\" alt=\"Emerald\">',\r\n    diamond: '<img src=\"./dist/assets/items/diamond.png\" alt=\"Diamond\">',\r\n    exit: '<img src=\"./dist/assets/exit.png\" alt=\"Exit\">'\r\n}\r\n\r\n$(document).ready(function () {\r\n    $.ajax({\r\n        url: './maze-configs/maze-small.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            initializeMaze(data);\r\n            // Wait for user input\r\n            $(\"#userInput\").keypress(function (e) {\r\n                if (e.which === 13) { // Enter key pressed\r\n                    let input = $(this).val().toLowerCase();\r\n                    handleUserInput(input);\r\n                    // clear the input field\r\n\r\n                    $(this).val(\"\");\r\n                }\r\n            });\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n});\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    exit = getExitCoordinates(data);\r\n    console.log(maze);\r\n    console.log(mazeSize);\r\n    console.log(exit);\r\n\r\n    // Further maze initializations like marking rooms as unvisited can go here\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n}\r\n\r\nfunction startGame() {\r\n    // Inform the player they can now start\r\n    console.log(\"Type 'start' to begin your adventure!\");\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    const encounterType = currentRoom.encounter;\r\n\r\n    if (input === \"start\") {\r\n        console.log(\"You find yourself in a mysterious room. Which direction will you go? Type 'north', 'south', 'east', or 'west' to move.\");\r\n        updateMazeVisualization();\r\n    } else if (directions.includes(input)) {\r\n        movePlayer(input);\r\n    } else if (input === \"punch\" && encounterType && encounterType.includes(\"troll\")) {\r\n        console.log(\"You punched the troll! It's gone now.\");\r\n        currentRoom.encounter = null; // Remove the troll from the room\r\n        displayEncounter(currentRoom);\r\n    } else if (input === \"pick up\" && encounterType && (encounterType === \"gold\" || encounterType === \"emerald\" || encounterType === \"diamond\")) {\r\n        console.log(`You picked up the ${encounterType}!`);\r\n        score += 10;  // for example, you can adjust score increments as you like\r\n        currentRoom.encounter = null; // Remove the item from the room\r\n        displayEncounter(currentRoom);\r\n    } else {\r\n        console.log(\"Unknown command. Type 'north', 'south', 'east', or 'west' to move. If there's a troll, type 'punch' to fight it. If there's an item, type 'pick up' to collect it.\");\r\n    }\r\n}\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n    switch (direction) {\r\n        case \"north\":\r\n            newY--;\r\n            break;\r\n        case \"south\":\r\n            newY++;\r\n            break;\r\n        case \"east\":\r\n            newX++;\r\n            break;\r\n        case \"west\":\r\n            newX--;\r\n            break;\r\n    }\r\n\r\n    // Check if the move is valid\r\n    if (newX >= 0 && newY >= 0 && newX < mazeSize && newY < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction]) {\r\n        playerPosition.x = newX;\r\n        playerPosition.y = newY;\r\n        enterRoom();\r\n    } else {\r\n        console.log(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x]; // Move this line to the top\r\n\r\n    // Check if this room has been visited before\r\n    if (!currentRoom.visited) {\r\n        currentRoom.visited = true;\r\n        // Handle encounters, items, etc. here\r\n\r\n        // Update the visual representation of the maze first\r\n        updateMazeVisualization();\r\n\r\n        // Then check if the player found the exit\r\n        if (currentRoom.encounter === \"exit\") {\r\n            console.log(\"Congratulations! You found the exit!\");\r\n            // End the game or restart, etc.\r\n        } else {\r\n            console.log(\"You've entered a new room. Which direction will you go next?\");\r\n        }\r\n    } else {\r\n        console.log(\"You've been in this room before. Choose another direction to explore.\");\r\n        updateMazeVisualization();  // Update the visual representation of the maze\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    // Clear any existing encounters from the previous room\r\n    $('#encounter').empty();\r\n\r\n    const encounterType = room.encounter;\r\n    if (encounterType && roomEncounter[encounterType]) {\r\n        $(\"#encounter\").append(roomEncounter[encounterType]);\r\n    }\r\n}\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}"]}