{"version":3,"sources":["movement.js","script.js"],"names":["enterRoomFromDirection","direction","let","isEncounterInThatRoom","maze","playerPosition","y","x","encounter","animationName","$","addClass","setTimeout","removeClass","moveToCenter","enterRoom","leaveRoomInDirection","hero","fromClass","directionMap","fromNorthEncounter","fromSouthEncounter","fromEastEncounter","fromWestEncounter","hasClass","mazeData","score","roomsVisited","duringGame","duringEncounter","question","flagQuestion","previousAnnouncement","directions","levelSelectWrapper","levelSelect","menuTrolls","menuHeader","scoreTotal","roomsTraveled","doors","north","east","south","west","loadMaze","level","val","ajax","url","type","dataType","success","data","initializeMaze","updateMazeVisualization","loadBackgroundImages","background","error","alert","backgroundSrc","loadedBackgroundImg","i","append","last","hideMenuItems","hide","mazeSize","rooms","mazeEnemies","Object","keys","enemies","mazeTreasures","treasures","exit","getExitCoordinates","j","visited","getRandomInt","getDistance","handleUserInput","input","toggleHelpModal","text","announce","insertFlag","resetGame","encounterAnnounce","includes","movePlayer","handleEncounterInput","color","flag","updateScore","checkForFlag","remove","currentRoom","console","log","number","toggleClass","encounters","currentEncounter","Array","isArray","encounterData","action","victory","find","first","shift","value","length","openDoors","handleEncounter","newX","newY","canMoveTo","closeDoors","renderMazeInConsole","displayEncounter","announcement","gameOver","show","not","max","Math","floor","random","pos1","pos2","abs","visualization","join","room","empty","forEach","item","image","message","attr","keypress","e","which","this","toLowerCase","document","ready","on"],"mappings":"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","file":"main.js","sourcesContent":["\nfunction enterRoomFromDirection(direction) {\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n    let isEncounterInThatRoom = currentRoom.encounter !== null;\n    let animationName = '';\n\n    switch (direction) {\n        case \"north\":\n            animationName = isEncounterInThatRoom ? 'fromSouthEncounter' : 'arriveFromSouth';\n            break;\n        case \"south\":\n            animationName = isEncounterInThatRoom ? 'fromNorthEncounter' : 'arriveFromNorth';\n            break;\n        case \"east\":\n            animationName = isEncounterInThatRoom ? 'fromWestEncounter' : 'arriveFromWest';\n            break;\n        case \"west\":\n            animationName = isEncounterInThatRoom ? 'fromEastEncounter' : 'arriveFromEast';\n            break;\n    }\n\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        // if it's an encounter, dont remove the animation class\n        if (!isEncounterInThatRoom) {\n            $('.hero').removeClass(animationName);\n            moveToCenter();\n        }\n    }, 1000);\n    enterRoom();\n}\n\nfunction leaveRoomInDirection(direction) {\n    let animationName = '';\n    switch (direction) {\n        case \"north\":\n            animationName = 'leaveToNorth';\n            break;\n        case \"south\":\n            animationName = 'leaveToSouth';\n            break;\n        case \"east\":\n            animationName = 'leaveToEast';\n            break;\n        case \"west\":\n            animationName = 'leaveToWest';\n            break;\n    }\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        $('.hero').removeClass(animationName);\n    }, 1000);\n\n}\n\nfunction moveToCenter() {\n    const hero = $('.hero');\n    const directionMap = {\n        'fromNorthEncounter': 'toCenterFromNorth',\n        'fromSouthEncounter': 'toCenterFromSouth',\n        'fromEastEncounter': 'toCenterFromEast',\n        'fromWestEncounter': 'toCenterFromWest',\n    };\n\n    for (let fromClass in directionMap) {\n        if (hero.hasClass(fromClass)) {\n            hero.addClass(directionMap[fromClass])\n                .removeClass(fromClass);\n            break;\n        }\n    }\n\n    // now after animation finishes after 1 sec remove the toCenter class\n    setTimeout(function () {\n        hero.removeClass('toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest');\n    }, 1000);\n}","let mazeData = null;\r\n\r\n// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nlet roomsVisited = 0;\r\nlet duringGame = false;\r\nlet duringEncounter = false;\r\nlet question = false;\r\nlet flagQuestion = false;\r\n\r\n// Needed to store the previous announcement when the player is asked a question\r\nlet previousAnnouncement = null;\r\n\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\n// html elements\r\nlet levelSelectWrapper = $('.maze__level-select');\r\nlet levelSelect = $('#level');\r\nlet menuTrolls = $('.dancing-troll');\r\nlet menuHeader = $('.menu__heading');\r\nlet scoreTotal = $('#score');\r\nlet roomsTraveled = $('#rooms');\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\n// User input handling\r\n$(\"#userInput\").keypress(function (e) {\r\n    if (e.which === 13) { // Enter key pressed\r\n        let input = $(this).val().toLowerCase();\r\n        handleUserInput(input);\r\n        // clear the input field\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction loadMaze() {\r\n    let level = levelSelect.val();\r\n\r\n    $.ajax({\r\n        url: './maze-configs/' + level + '.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            mazeData = data;\r\n            initializeMaze(data);\r\n            updateMazeVisualization();\r\n\r\n            // Load the background images\r\n            loadBackgroundImages(data.background);\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadBackgroundImages(backgroundSrc) {\r\n    // Load the background images\r\n    let loadedBackgroundImg = '<img class=\"maze__menu-background\" src=\"' + backgroundSrc + '\" alt=\"Background\">';\r\n\r\n    // create 4 copies of the background image, add class maze__menu-background-- + number to each and append to #maze\r\n    for (let i = 1; i < 5; i++) {\r\n        $('#maze').append(loadedBackgroundImg);\r\n        $('.maze__menu-background').last().addClass('maze__menu-background--' + i);\r\n    }\r\n}\r\n\r\nfunction hideMenuItems() {\r\n    menuTrolls.hide();\r\n    levelSelectWrapper.hide();\r\n    menuHeader.hide();\r\n\r\n}\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    mazeEnemies = Object.keys(data.enemies);  // get enemy keys\r\n    mazeTreasures = Object.keys(data.treasures);  // get treasure keys\r\n    exit = getExitCoordinates(data);\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n\r\n    if (input === \"start\" && !duringGame) {\r\n        duringGame = true;\r\n        resetGame();\r\n        hideMenuItems();\r\n        loadMaze();\r\n        announce(\"You are in a maze. Try to find the exit. Type 'help' for more instructions.\");\r\n    } else if (input === \"help\") {\r\n        toggleHelpModal();\r\n    } else if (input === \"start\"  && duringGame) {\r\n        previousAnnouncement = $('#announcer').text();\r\n        announce(\"Do you want to return to the main menu? Type 'yes' or 'no'.\");\r\n        question = true;\r\n    } else if (input === 'flag' && !duringEncounter) {\r\n        previousAnnouncement = $('#announcer').text();\r\n        announce(\"Insert flag for 100 points. Pick color, type 'red', 'green', 'yellow' or 'cancel' to cancel.\");\r\n        flagQuestion = true;\r\n    } else if (flagQuestion) {\r\n        if (input === 'red' || input === 'green' || input === 'yellow') {\r\n            // set flag\r\n            insertFlag(input);\r\n        } else if (input === 'cancel') {\r\n            // cancel flag setting\r\n            flagQuestion = false;\r\n            announce( previousAnnouncement );\r\n        } else {\r\n            announce(\"Unknown flag color. Type 'red', 'green', 'yellow' or 'cancel' to cancel.\");\r\n        }\r\n    } else if (question) {\r\n        if (input === \"yes\") {\r\n            // Reset everything\r\n            duringGame = false;\r\n            duringEncounter = false;\r\n            question = false;\r\n            resetGame();\r\n            announce(\"Game has been reset. Type 'start' to begin again.\");\r\n        } else if (input === \"no\") {\r\n            // Continue game\r\n            question = false;\r\n            announce(previousAnnouncement);\r\n        } else {\r\n            encounterAnnounce(\"Please answer with 'yes' or 'no'.\");\r\n        }\r\n    } else if (directions.includes(input)) {\r\n        // Check if the player is during an encounter. If so, notify them and prevent movement.\r\n        if (duringEncounter) {\r\n            encounterAnnounce(\"You can't leave until you've dealt with the encounter!\");\r\n        } else {\r\n            movePlayer(input);\r\n        }\r\n    } else if (duringEncounter) {\r\n        // Handle the encounter input\r\n        handleEncounterInput(input);\r\n    } else {\r\n        announce(\"Unknown command. Type 'help' for more instructions.\");\r\n    }\r\n}\r\n\r\nfunction insertFlag( color ) {\r\n    // set current room encounter to red flag\r\n    maze[playerPosition.y][playerPosition.x].flag = color + '-flag';\r\n    flagQuestion = false;\r\n    \r\n    // deduct 100 from score and show new score\r\n    updateScore( -100 );\r\n\r\n    encounterAnnounce( color + \" flag set in this room!\");\r\n    announce( previousAnnouncement );\r\n    // add flag img to the room\r\n    $('#maze').append('<img class=\"flag\" src=\"./dist/assets/flags/' + color + '-flag.jpg\" alt=\"Flag\">');\r\n}\r\n\r\nfunction checkForFlag() {\r\n    // Remove any existing flag images\r\n    $('.flag').remove();\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    \r\n    if (currentRoom.flag) {\r\n        // add flag img to the room\r\n        console.log(currentRoom.flag + '-flag no jest');\r\n        console.log($('#encounter'));\r\n        $('#maze').append('<img class=\"flag\" src=\"./dist/assets/flags/' + currentRoom.flag + '.jpg\" alt=\"Flag\">');\r\n    }\r\n}\r\n\r\nfunction updateScore( number ) {\r\n    score += number;\r\n    scoreTotal.text(score);\r\n}\r\n\r\nfunction toggleHelpModal() {\r\n    $('.help-modal').toggleClass('hidden');\r\n}\r\n\r\nfunction handleEncounterInput(input) {\r\n    if (!duringEncounter) return;\r\n\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n\r\n    if (!encounters) {\r\n        return;\r\n    }\r\n\r\n    encounters = Array.isArray(encounters) ? encounters : [encounters];\r\n    const currentEncounter = encounters[0];\r\n\r\n    let encounterData;\r\n    if (mazeData.enemies[currentEncounter]) {\r\n        encounterData = mazeData.enemies[currentEncounter];\r\n    } else if (mazeData.treasures[currentEncounter]) {\r\n        encounterData = mazeData.treasures[currentEncounter];\r\n    } else if (currentEncounter === \"exit\") {\r\n        encounterData = { action: 'exit', victory: `You've found the exit! Congratulations.` };\r\n    }\r\n\r\n    if (input === encounterData.action) {\r\n        encounterAnnounce(encounterData.victory);\r\n\r\n        // Add 'defeated' class to the next non-defeated image\r\n        $(\"#encounter\").find(\"img:not(.defeated)\").first().addClass('defeated');\r\n\r\n        encounters.shift(); // Remove the handled encounter\r\n\r\n        if (mazeData.treasures[currentEncounter]) {\r\n            updateScore( mazeData.treasures[currentEncounter].value );\r\n        }\r\n\r\n        if (encounters.length === 0) {\r\n            announce(\"Room cleared! Move on to the next room.\");\r\n            currentRoom.encounter = null;\r\n            duringEncounter = false;\r\n            moveToCenter();\r\n            openDoors();\r\n        } else {\r\n            // Otherwise, proceed to the next encounter in the list\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        encounterAnnounce(\"Wrong action! Try again.\");\r\n    }\r\n}\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n\r\n    switch (direction) {\r\n        case \"north\": newY--; break;\r\n        case \"south\": newY++; break;\r\n        case \"east\": newX++; break;\r\n        case \"west\": newX--; break;\r\n    }\r\n\r\n    if (canMoveTo(newX, newY, direction)) {\r\n        leaveRoomInDirection(direction);\r\n        roomsVisited++;\r\n        roomsTraveled.text(roomsVisited);\r\n        setTimeout(function () {\r\n            playerPosition.x = newX;\r\n            playerPosition.y = newY;\r\n            enterRoomFromDirection(direction);\r\n        }, 1000);\r\n    } else {\r\n        announce(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction canMoveTo(x, y, direction) {\r\n    return x >= 0 && y >= 0 && x < mazeSize && y < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction];\r\n}\r\n\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    console.log(currentRoom.flag);\r\n    // reset encounterAnnouncer\r\n    encounterAnnounce(\"\");\r\n\r\n    if (!currentRoom.visited && currentRoom.encounter !== null) {\r\n        // remove flag img from the room if arrived from room where you set one\r\n        $('.flag').remove();\r\n\r\n        currentRoom.visited = true;\r\n        updateMazeVisualization();\r\n\r\n    \r\n            duringEncounter = true;\r\n            // after 1 sec close doors\r\n            setTimeout(function () {\r\n                closeDoors();\r\n            }, 1000);\r\n            handleEncounter();\r\n\r\n        \r\n    } else {\r\n        announce(\"Nothing in this room\");\r\n        updateMazeVisualization();\r\n        checkForFlag();\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction handleEncounter() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n\r\n    if (!encounters) return;\r\n\r\n    encounters = Array.isArray(encounters) ? encounters : [encounters];\r\n    const currentEncounter = encounters[0];\r\n\r\n    if (mazeEnemies.includes(currentEncounter)) {\r\n        const enemyData = mazeData.enemies[currentEncounter];\r\n        announce(enemyData.announcement);\r\n    } else if (mazeTreasures.includes(currentEncounter)) {\r\n        const treasureData = mazeData.treasures[currentEncounter];\r\n        announce(treasureData.announcement);\r\n    } else if (currentEncounter === 'exit') {\r\n        announce(\"You've found the exit! Congratulations.\");\r\n        gameOver();\r\n    }\r\n}\r\n\r\nfunction gameOver() {\r\n    duringGame = false;\r\n    duringEncounter = false;\r\n\r\n    menuTrolls.show();\r\n    levelSelectWrapper.show();\r\n    menuHeader.show();\r\n\r\n    // add .game-over class to the hero element, .maze__score and .maze__rooms\r\n    $('.hero').addClass('game-over');\r\n    $('.maze__score').addClass('game-over');\r\n    $('.maze__rooms').addClass('game-over');\r\n\r\n    // delete the background images but not the .dancing-troll\r\n    $('.maze__menu-background').not('.dancing-troll').remove();\r\n\r\n    encounterAnnounce(\"Type start to play again.\");\r\n\r\n}\r\n\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    $('#encounter').empty();\r\n    if (room.encounter) {\r\n        const encounters = Array.isArray(room.encounter) ? room.encounter : [room.encounter];\r\n\r\n        encounters.forEach(item => {\r\n            if (mazeEnemies.includes(item)) {\r\n                $(\"#encounter\").append(mazeData.enemies[item].image);\r\n            } else if (mazeTreasures.includes(item)) {\r\n                $(\"#encounter\").append(mazeData.treasures[item].image);\r\n            } else if (item === \"exit\") {\r\n                $(\"#encounter\").append('<img src=\"./dist/assets/exit.png\" alt=\"Exit\">');\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}\r\n\r\nfunction announce(message) {\r\n    $('#announcer').text(message);\r\n}\r\n\r\nfunction encounterAnnounce(message) {\r\n    $('#encounterAnnouncer').text(message);\r\n}\r\n\r\nfunction closeDoors() {\r\n    $('.doors').addClass('closed');\r\n}\r\n\r\nfunction openDoors() {\r\n    $('.doors').removeClass('closed');\r\n}\r\n\r\nfunction resetGame() {\r\n    // Revert all hidden menu items\r\n    menuTrolls.show();\r\n    levelSelectWrapper.show();\r\n    menuHeader.show();\r\n\r\n    // remove .game-over class from the hero element, .maze__score and .maze__rooms\r\n    $('.hero').removeClass('game-over');\r\n    $('.maze__score').removeClass('game-over');\r\n    $('.maze__rooms').removeClass('game-over');\r\n\r\n    // delete the background images but not the .dancing-troll\r\n    $('.maze__menu-background').not('.dancing-troll').remove();\r\n\r\n    // Remove other classes from the hero element apart from .hero\r\n    $('.hero').attr('class', 'hero');\r\n\r\n    // Remove all images from the #encounter container\r\n    $('#encounter').empty();\r\n\r\n    // Unload Maze\r\n    maze = null;\r\n    mazeData = null;\r\n    playerPosition = { x: 0, y: 0 };\r\n    score = 0;\r\n    roomsVisited = 0;\r\n    scoreTotal.text(score);\r\n    roomsTraveled.text(roomsVisited);\r\n}\r\n\r\n$(document).ready(function () {\r\n    console.log($('.help-modal'));\r\n    console.log($('#closeModal'));\r\n    // toggle help modal on click\r\n    $('#closeModal').on('click', toggleHelpModal);\r\n\r\n});"]}