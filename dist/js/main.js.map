{"version":3,"sources":["script.js"],"names":["let","playerPosition","x","y","score","duringGame","duringEncounter","question","directions","levelSelectWrapper","$","levelSelect","menuTrolls","menuHeader","level","doors","north","east","south","west","roomEncounter","white_troll","green_troll","yellow_troll","gold","emerald","diamond","exit","loadMaze","val","ajax","url","type","dataType","success","data","initializeMaze","updateMazeVisualization","error","alert","hideMenuItems","hide","mazeSize","maze","rooms","getExitCoordinates","i","j","visited","getRandomInt","getDistance","handleUserInput","input","announce","includes","movePlayer","direction","newX","newY","leaveRoomInDirection","setTimeout","enterRoomFromDirection","remove","currentRoom","append","enterRoom","encounter","renderMazeInConsole","displayEncounter","max","Math","floor","random","pos1","pos2","abs","visualization","Array","join","console","log","room","empty","encounterType","message","text","isEncounterInThatRoom","animationName","addClass","removeClass","moveToCenter","fromClass","hero","directionMap","fromNorthEncounter","fromSouthEncounter","fromEastEncounter","fromWestEncounter","hasClass","keypress","e","which","this","toLowerCase"],"mappings":"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","file":"main.js","sourcesContent":["// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nlet duringGame = false;\r\nlet duringEncounter = false;\r\nlet question = false;\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\nlet levelSelectWrapper = $('.maze__level-select');\r\nlet levelSelect = $('#level');\r\nlet menuTrolls = $('.maze__menu-troll');\r\nlet menuHeader = $('.menu__heading');\r\nlet level\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\nconst roomEncounter = {\r\n    white_troll: '<img src=\"./dist/assets/monsters/white-troll.png\" alt=\"White troll\">',\r\n    green_troll: '<img src=\"./dist/assets/monsters/green-troll.png\" alt=\"Green troll\">',\r\n    yellow_troll: '<img src=\"./dist/assets/monsters/yellow-troll.png\" alt=\"Yellow troll\">',\r\n    gold: '<img src=\"./dist/assets/items/gold.png\" alt=\"Gold\">',\r\n    emerald: '<img src=\"./dist/assets/items/emerald.png\" alt=\"Emerald\">',\r\n    diamond: '<img src=\"./dist/assets/items/diamond.png\" alt=\"Diamond\">',\r\n    exit: '<img src=\"./dist/assets/exit.png\" alt=\"Exit\">'\r\n}\r\n\r\n// User input handling\r\n$(\"#userInput\").keypress(function (e) {\r\n    if (e.which === 13) { // Enter key pressed\r\n        let input = $(this).val().toLowerCase();\r\n        handleUserInput(input);\r\n        // clear the input field\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction loadMaze() {\r\n    let level = levelSelect.val();\r\n\r\n    $.ajax({\r\n        url: './maze-configs/' + level + '.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            initializeMaze(data);\r\n            updateMazeVisualization();\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n}\r\n\r\nfunction hideMenuItems() {\r\n    menuTrolls.hide();\r\n    levelSelectWrapper.hide();\r\n    menuHeader.hide();\r\n}\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    exit = getExitCoordinates(data);\r\n\r\n    // Further maze initializations like marking rooms as unvisited can go here\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n    if (input === \"start\" && !duringGame) {\r\n        // announce(\"You find yourself in a mysterious room. Which direction will you go? Type 'north', 'south', 'east', or 'west' to move.\");\r\n        duringGame = true;\r\n        hideMenuItems();\r\n        loadMaze();\r\n    } else if (input === \"start\" && duringGame) {\r\n        announce(\"Do you want to return to main menu? Type 'yes' or 'no'.\");\r\n        question = true;\r\n    } else if (directions.includes(input)) {\r\n        movePlayer(input);\r\n        // handleEncounter();\r\n    } else {\r\n        announce(\"Unknown command. Type 'help' for more instructions.\");\r\n    }\r\n}\r\n\r\n// Encounter code to be refactored later\r\n// const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n// const encounterType = currentRoom.encounter;\r\n// else if (input === \"punch\" && encounterType && encounterType.includes(\"troll\")) {\r\n//     announce(\"You punched the troll! It's gone now.\");\r\n//     currentRoom.encounter = null; // Remove the troll from the room\r\n//     displayEncounter(currentRoom);\r\n// } else if (input === \"pick up\" && encounterType && (encounterType === \"gold\" || encounterType === \"emerald\" || encounterType === \"diamond\")) {\r\n//     announce(`You picked up the ${encounterType}!`);\r\n//     score += 10;  // for example, you can adjust score increments as you like\r\n//     currentRoom.encounter = null; // Remove the item from the room\r\n//     displayEncounter(currentRoom);\r\n// }\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n    switch (direction) {\r\n        case \"north\":\r\n            newY--;\r\n            break;\r\n        case \"south\":\r\n            newY++;\r\n            break;\r\n        case \"east\":\r\n            newX++;\r\n            break;\r\n        case \"west\":\r\n            newX--;\r\n            break;\r\n    }\r\n\r\n    if (newX >= 0 && newY >= 0 && newX < mazeSize && newY < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction]) {\r\n        leaveRoomInDirection(direction);  // Play the leaving animation\r\n\r\n        setTimeout(function () {\r\n            playerPosition.x = newX;\r\n            playerPosition.y = newY;\r\n            enterRoomFromDirection(direction);\r\n        }, 1000);\r\n    } else {\r\n        announce(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    if (!currentRoom.visited) {\r\n        currentRoom.visited = true;\r\n        updateMazeVisualization();\r\n\r\n        if (currentRoom.encounter === \"exit\") {\r\n            announce(\"Congratulations! You found the exit!\");\r\n        } else {\r\n            // Handle encounters here\r\n            if (currentRoom.encounter && currentRoom.encounter.includes(\"troll\")) {\r\n                announce(\"You've encountered a troll! Type 'punch' to fight it.\");\r\n            } else if (currentRoom.encounter && (currentRoom.encounter === \"gold\" || currentRoom.encounter === \"emerald\" || currentRoom.encounter === \"diamond\")) {\r\n                announce(`You see a ${currentRoom.encounter}! Type 'pick up' to collect it.`);\r\n            } else {\r\n                announce(\"You've entered a new room. Which direction will you go next?\");\r\n            }\r\n        }\r\n    } else {\r\n        announce(\"You've been in this room before. Choose another direction to explore.\");\r\n        updateMazeVisualization();\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    // Clear any existing encounters from the previous room\r\n    $('#encounter').empty();\r\n\r\n    const encounterType = room.encounter;\r\n    if (encounterType && roomEncounter[encounterType]) {\r\n        $(\"#encounter\").append(roomEncounter[encounterType]);\r\n    }\r\n}\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}\r\n\r\nfunction announce(message) {\r\n    $('#announcer').text(message);\r\n}\r\n\r\nfunction enterRoomFromDirection(direction) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let isEncounterInThatRoom = currentRoom.encounter !== null;\r\n    let animationName = '';\r\n\r\n    switch (direction) {\r\n        case \"north\":\r\n            animationName = isEncounterInThatRoom ? 'fromSouthEncounter' : 'arriveFromSouth';\r\n            break;\r\n        case \"south\":\r\n            animationName = isEncounterInThatRoom ? 'fromNorthEncounter' : 'arriveFromNorth';\r\n            break;\r\n        case \"east\":\r\n            animationName = isEncounterInThatRoom ? 'fromWestEncounter' : 'arriveFromWest';\r\n            break;\r\n        case \"west\":\r\n            animationName = isEncounterInThatRoom ? 'fromEastEncounter' : 'arriveFromEast';\r\n            break;\r\n    }\r\n\r\n    $('.hero').addClass(animationName);\r\n    // Wait for the animation to finish\r\n    setTimeout(function () {\r\n        // if it's an encounter, dont remove the animation class\r\n        if (!isEncounterInThatRoom) {\r\n            $('.hero').removeClass(animationName);\r\n            moveToCenter();\r\n        }\r\n    }, 1000);\r\n    enterRoom();\r\n}\r\n\r\nfunction leaveRoomInDirection(direction) {\r\n    let animationName = '';\r\n    switch (direction) {\r\n        case \"north\":\r\n            animationName = 'leaveToNorth';\r\n            break;\r\n        case \"south\":\r\n            animationName = 'leaveToSouth';\r\n            break;\r\n        case \"east\":\r\n            animationName = 'leaveToEast';\r\n            break;\r\n        case \"west\":\r\n            animationName = 'leaveToWest';\r\n            break;\r\n    }\r\n    $('.hero').addClass(animationName);\r\n    // Wait for the animation to finish\r\n    setTimeout(function () {\r\n        $('.hero').removeClass(animationName);\r\n    }, 1000);\r\n\r\n}\r\n\r\nfunction moveToCenter() {\r\n    const hero = $('.hero');\r\n    const directionMap = {\r\n        'fromNorthEncounter': 'toCenterFromNorth',\r\n        'fromSouthEncounter': 'toCenterFromSouth',\r\n        'fromEastEncounter': 'toCenterFromEast',\r\n        'fromWestEncounter': 'toCenterFromWest',\r\n    };\r\n\r\n    for (let fromClass in directionMap) {\r\n        if (hero.hasClass(fromClass)) {\r\n            hero.addClass(directionMap[fromClass])\r\n                .removeClass(fromClass);\r\n            break;\r\n        }\r\n    }\r\n}"]}