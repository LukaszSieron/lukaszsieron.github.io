{"version":3,"sources":["movement.js","script.js"],"names":["enterRoomFromDirection","direction","let","isEncounterInThatRoom","maze","playerPosition","y","x","encounter","animationName","$","addClass","setTimeout","removeClass","moveToCenter","enterRoom","leaveRoomInDirection","hero","fromClass","directionMap","fromNorthEncounter","fromSouthEncounter","fromEastEncounter","fromWestEncounter","hasClass","mazeData","score","roomsVisited","duringGame","duringEncounter","question","flagQuestion","enemyTimer","previousAnnouncement","directions","levelSelectWrapper","levelSelect","menuTrolls","menuHeader","scoreTotal","roomsTraveled","doors","north","east","south","west","loadMaze","level","val","ajax","url","type","dataType","success","data","initializeMaze","updateMazeVisualization","loadBackgroundImages","background","error","alert","backgroundSrc","loadedBackgroundImg","i","append","last","hideMenuItems","hide","mazeSize","rooms","mazeEnemies","Object","keys","enemies","mazeTreasures","treasures","exit","getExitCoordinates","j","visited","getRandomInt","getDistance","handleUserInput","input","toggleHelpModal","text","announce","insertFlag","resetGame","encounterAnnounce","includes","movePlayer","handleEncounterInput","color","flag","updateScore","checkForFlag","remove","currentRoom","amount","toggleClass","startEnemyTimer","numEnemies","setInterval","clearInterval","stopEnemyTimer","encounters","currentEncounter","Array","isArray","encounterData","action","victory","find","first","shift","remainingEnemies","filter","e","length","value","openDoors","handleEncounter","newX","newY","canMoveTo","closeDoors","renderMazeInConsole","displayEncounter","announcement","gameOver","show","not","max","Math","floor","random","pos1","pos2","abs","visualization","join","console","log","room","empty","forEach","item","content","image","message","attr","on","keypress","which","this","toLowerCase"],"mappings":"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","file":"main.js","sourcesContent":["\nfunction enterRoomFromDirection(direction) {\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n    let isEncounterInThatRoom = currentRoom.encounter !== null;\n    let animationName = '';\n\n    switch (direction) {\n        case \"north\":\n            animationName = isEncounterInThatRoom ? 'fromSouthEncounter' : 'arriveFromSouth';\n            break;\n        case \"south\":\n            animationName = isEncounterInThatRoom ? 'fromNorthEncounter' : 'arriveFromNorth';\n            break;\n        case \"east\":\n            animationName = isEncounterInThatRoom ? 'fromWestEncounter' : 'arriveFromWest';\n            break;\n        case \"west\":\n            animationName = isEncounterInThatRoom ? 'fromEastEncounter' : 'arriveFromEast';\n            break;\n    }\n\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        // if it's an encounter, dont remove the animation class\n        if (!isEncounterInThatRoom) {\n            $('.hero').removeClass(animationName);\n            moveToCenter();\n        }\n    }, 1000);\n    enterRoom();\n}\n\nfunction leaveRoomInDirection(direction) {\n    let animationName = '';\n    switch (direction) {\n        case \"north\":\n            animationName = 'leaveToNorth';\n            break;\n        case \"south\":\n            animationName = 'leaveToSouth';\n            break;\n        case \"east\":\n            animationName = 'leaveToEast';\n            break;\n        case \"west\":\n            animationName = 'leaveToWest';\n            break;\n    }\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        $('.hero').removeClass(animationName);\n    }, 1000);\n\n}\n\nfunction moveToCenter() {\n    const hero = $('.hero');\n    const directionMap = {\n        'fromNorthEncounter': 'toCenterFromNorth',\n        'fromSouthEncounter': 'toCenterFromSouth',\n        'fromEastEncounter': 'toCenterFromEast',\n        'fromWestEncounter': 'toCenterFromWest',\n    };\n\n    for (let fromClass in directionMap) {\n        if (hero.hasClass(fromClass)) {\n            hero.addClass(directionMap[fromClass])\n                .removeClass(fromClass);\n            break;\n        }\n    }\n\n    // now after animation finishes after 1 sec remove the toCenter class\n    setTimeout(function () {\n        hero.removeClass('toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest');\n    }, 1000);\n}","let mazeData = null;\r\n\r\n// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nlet roomsVisited = 0;\r\nlet duringGame = false;\r\nlet duringEncounter = false;\r\nlet question = false;\r\nlet flagQuestion = false;\r\nlet enemyTimer; // to hold the interval for decrementing score due to enemies\r\n\r\n// Needed to store the previous announcement when the player is asked a question\r\nlet previousAnnouncement = null;\r\n\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\n// html elements\r\nlet levelSelectWrapper = $('.maze__level-select');\r\nlet levelSelect = $('#level');\r\nlet menuTrolls = $('.dancing-troll');\r\nlet menuHeader = $('.menu__heading');\r\nlet scoreTotal = $('#score');\r\nlet roomsTraveled = $('#rooms');\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\n// toggle help modal on click\r\n$('#closeModal').on('click', toggleHelpModal);\r\n\r\n// User input handling\r\n$(\"#userInput\").keypress(function (e) {\r\n    if (e.which === 13) { // Enter key pressed\r\n        let input = $(this).val().toLowerCase();\r\n        handleUserInput(input);\r\n        // clear the input field\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction loadMaze() {\r\n    let level = levelSelect.val();\r\n\r\n    $.ajax({\r\n        url: './maze-configs/' + level + '.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            mazeData = data;\r\n            initializeMaze(data);\r\n            updateMazeVisualization();\r\n\r\n            // Load the background images\r\n            loadBackgroundImages(data.background);\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadBackgroundImages(backgroundSrc) {\r\n    // Load the background images\r\n    let loadedBackgroundImg = '<img class=\"maze__menu-background\" src=\"' + backgroundSrc + '\" alt=\"Background\">';\r\n\r\n    // create 4 copies of the background image, add class maze__menu-background-- + number to each and append to #maze\r\n    for (let i = 1; i < 5; i++) {\r\n        $('#maze').append(loadedBackgroundImg);\r\n        $('.maze__menu-background').last().addClass('maze__menu-background--' + i);\r\n    }\r\n}\r\n\r\nfunction hideMenuItems() {\r\n    menuTrolls.hide();\r\n    levelSelectWrapper.hide();\r\n    menuHeader.hide();\r\n\r\n}\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    mazeEnemies = Object.keys(data.enemies);  // get enemy keys\r\n    mazeTreasures = Object.keys(data.treasures);  // get treasure keys\r\n    exit = getExitCoordinates(data);\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n\r\n    // Clear the encounter in the initial room\r\n    maze[playerPosition.y][playerPosition.x].encounter = null;\r\n    maze[playerPosition.y][playerPosition.x].visited = true;\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n\r\n    if (input === \"start\" && !duringGame) {\r\n        duringGame = true;\r\n        resetGame();\r\n        hideMenuItems();\r\n        loadMaze();\r\n        announce(\"You are in a maze. Try to find the exit. Type 'help' for more instructions.\");\r\n    } else if (input === \"help\") {\r\n        toggleHelpModal();\r\n    } else if (input === \"start\" && duringGame) {\r\n        previousAnnouncement = $('#announcer').text();\r\n        announce(\"Do you want to return to the main menu? Type 'yes' or 'no'.\");\r\n        question = true;\r\n    } else if (input === 'flag' && !duringEncounter) {\r\n        previousAnnouncement = $('#announcer').text();\r\n        announce(\"Insert flag for 100 points. Pick color, type 'red', 'green', 'yellow' or 'cancel' to cancel.\");\r\n        flagQuestion = true;\r\n    } else if (flagQuestion) {\r\n        if (input === 'red' || input === 'green' || input === 'yellow') {\r\n            // set flag\r\n            insertFlag(input);\r\n        } else if (input === 'cancel') {\r\n            // cancel flag setting\r\n            flagQuestion = false;\r\n            announce(previousAnnouncement);\r\n        } else {\r\n            announce(\"Unknown flag color. Type 'red', 'green', 'yellow' or 'cancel' to cancel.\");\r\n        }\r\n    } else if (question) {\r\n        if (input === \"yes\") {\r\n            // Reset everything\r\n            duringGame = false;\r\n            duringEncounter = false;\r\n            question = false;\r\n            resetGame();\r\n            announce(\"Game has been reset. Type 'start' to begin again.\");\r\n        } else if (input === \"no\") {\r\n            // Continue game\r\n            question = false;\r\n            announce(previousAnnouncement);\r\n        } else {\r\n            encounterAnnounce(\"Please answer with 'yes' or 'no'.\");\r\n        }\r\n    } else if (directions.includes(input)) {\r\n        // Check if the player is during an encounter. If so, notify them and prevent movement.\r\n        if (duringEncounter) {\r\n            encounterAnnounce(\"You can't leave until you've dealt with the encounter!\");\r\n        } else {\r\n            movePlayer(input);\r\n        }\r\n    } else if (duringEncounter) {\r\n        // Handle the encounter input\r\n        handleEncounterInput(input);\r\n    } else {\r\n        announce(\"Unknown command. Type 'help' for more instructions.\");\r\n    }\r\n}\r\n\r\nfunction insertFlag(color) {\r\n    // set current room encounter to red flag\r\n    maze[playerPosition.y][playerPosition.x].flag = color + '-flag';\r\n    flagQuestion = false;\r\n\r\n    // deduct 100 from score and show new score\r\n    updateScore(-100);\r\n\r\n    encounterAnnounce(color + \" flag set in this room!\");\r\n    announce(previousAnnouncement);\r\n    // add flag img to the room\r\n    $('#maze').append('<img class=\"flag\" src=\"./dist/assets/flags/' + color + '-flag.jpg\" alt=\"Flag\">');\r\n}\r\n\r\nfunction checkForFlag() {\r\n    // Remove any existing flag images\r\n    $('.flag').remove();\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    if (currentRoom.flag) {\r\n        // add flag img to the room\r\n        $('#maze').append('<img class=\"flag\" src=\"./dist/assets/flags/' + currentRoom.flag + '.jpg\" alt=\"Flag\">');\r\n    }\r\n}\r\n\r\nfunction updateScore(amount) {\r\n    score += amount;\r\n\r\n    // Ensure the score doesn't go below zero\r\n    if (score < 0) {\r\n        score = 0;\r\n    }\r\n\r\n    // Update the score display\r\n    scoreTotal.text(score);\r\n}\r\n\r\nfunction toggleHelpModal() {\r\n    $('.help-modal').toggleClass('hidden');\r\n}\r\n\r\nfunction startEnemyTimer(numEnemies) {\r\n    enemyTimer = setInterval(function () {\r\n        updateScore(-100 * numEnemies);\r\n        // Stop the timer if score reaches zero\r\n        if (score <= 0) {\r\n            clearInterval(enemyTimer);\r\n            updateScore(0);\r\n        }\r\n    }, 2000);\r\n}\r\n\r\nfunction stopEnemyTimer() {\r\n    clearInterval(enemyTimer);\r\n}\r\n\r\n\r\nfunction handleEncounterInput(input) {\r\n    if (!duringEncounter) return;\r\n\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n\r\n    if (!encounters) return;\r\n\r\n    encounters = Array.isArray(encounters) ? encounters : [encounters];\r\n    const currentEncounter = encounters[0];\r\n\r\n    let encounterData;\r\n    if (mazeData.enemies[currentEncounter]) {\r\n        encounterData = mazeData.enemies[currentEncounter];\r\n    } else if (mazeData.treasures[currentEncounter]) {\r\n        encounterData = mazeData.treasures[currentEncounter];\r\n    } else if (currentEncounter === \"exit\") {\r\n        encounterData = { action: 'exit', victory: `You've found the exit! Congratulations.` };\r\n    }\r\n\r\n    if (input === encounterData.action) {\r\n        encounterAnnounce(encounterData.victory);\r\n\r\n        // Stop the existing enemy timer\r\n        clearInterval(enemyTimer);\r\n\r\n        // Add 'defeated' class to the next non-defeated image\r\n        $(\"#encounter\").find(\"img:not(.defeated)\").first().addClass('defeated');\r\n\r\n        encounters.shift(); // Remove the handled encounter\r\n\r\n        const remainingEnemies = encounters.filter(e => mazeEnemies.includes(e)).length;\r\n\r\n        if (remainingEnemies > 0) {\r\n            startEnemyTimer(remainingEnemies);\r\n        }\r\n\r\n        if (mazeData.treasures[currentEncounter]) {\r\n            updateScore(mazeData.treasures[currentEncounter].value);\r\n        }\r\n\r\n        if (encounters.length === 0) {\r\n            announce(\"Room cleared! Move on to the next room.\");\r\n            currentRoom.encounter = null;\r\n            duringEncounter = false;\r\n            stopEnemyTimer();  // Stop decrementing score due to enemies\r\n            moveToCenter();\r\n            openDoors();\r\n        } else {\r\n            // Update the timer for remaining enemies\r\n            stopEnemyTimer();\r\n            startEnemyTimer(remainingEnemies); // Notice the change here\r\n            // Otherwise, proceed to the next encounter in the list\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        encounterAnnounce(\"Wrong action! Try again.\");\r\n    }\r\n}\r\n\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n\r\n    switch (direction) {\r\n        case \"north\": newY--; break;\r\n        case \"south\": newY++; break;\r\n        case \"east\": newX++; break;\r\n        case \"west\": newX--; break;\r\n    }\r\n\r\n    if (canMoveTo(newX, newY, direction)) {\r\n        leaveRoomInDirection(direction);\r\n        roomsVisited++;\r\n        roomsTraveled.text(roomsVisited);\r\n        setTimeout(function () {\r\n            playerPosition.x = newX;\r\n            playerPosition.y = newY;\r\n            enterRoomFromDirection(direction);\r\n        }, 1000);\r\n    } else {\r\n        announce(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction canMoveTo(x, y, direction) {\r\n    return x >= 0 && y >= 0 && x < mazeSize && y < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction];\r\n}\r\n\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Reset encounterAnnouncer\r\n    encounterAnnounce(\"\");\r\n\r\n    if (!currentRoom.visited && currentRoom.encounter !== null) {\r\n\r\n        // Remove flag img from the room if arrived from room where you set one\r\n        $('.flag').remove();\r\n\r\n        // Mark the room as visited\r\n        currentRoom.visited = true;\r\n\r\n        // Update the maze visualization\r\n        updateMazeVisualization();\r\n\r\n        // Initiate encounter state\r\n        duringEncounter = true;\r\n\r\n        // After 1 sec close doors\r\n        setTimeout(function () {\r\n            closeDoors();\r\n        }, 1000);\r\n\r\n        handleEncounter();\r\n\r\n        // after 2 sec add class 'fight' to elements .enemy--wrapper\r\n        setTimeout(function () {\r\n            $('.enemy--wrapper').addClass('fight');\r\n        }, 2000);\r\n\r\n        // Start decrementing score for each remaining undefeated enemy\r\n        if (Array.isArray(currentRoom.encounter)) {\r\n            const numEnemies = currentRoom.encounter.filter(e => mazeEnemies.includes(e)).length;\r\n            if (numEnemies > 0) {\r\n                startEnemyTimer(numEnemies);\r\n            }\r\n        } else if (mazeEnemies.includes(currentRoom.encounter)) {\r\n            startEnemyTimer(1);\r\n        }\r\n\r\n    } else {\r\n        announce(\"Nothing in this room\");\r\n        updateMazeVisualization();\r\n        checkForFlag();\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction handleEncounter() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n\r\n    if (!encounters) return;\r\n\r\n    encounters = Array.isArray(encounters) ? encounters : [encounters];\r\n    const currentEncounter = encounters[0];\r\n\r\n    if (mazeEnemies.includes(currentEncounter)) {\r\n        const enemyData = mazeData.enemies[currentEncounter];\r\n        announce(enemyData.announcement);\r\n    } else if (mazeTreasures.includes(currentEncounter)) {\r\n        const treasureData = mazeData.treasures[currentEncounter];\r\n        announce(treasureData.announcement);\r\n    } else if (currentEncounter === 'exit') {\r\n        announce(\"You've found the exit! Congratulations.\");\r\n        gameOver();\r\n    }\r\n}\r\n\r\nfunction gameOver() {\r\n    duringGame = false;\r\n    duringEncounter = false;\r\n\r\n    menuTrolls.show();\r\n    levelSelectWrapper.show();\r\n    menuHeader.show();\r\n\r\n    // add .game-over class to the hero element, .maze__score and .maze__rooms\r\n    $('.hero').addClass('game-over');\r\n    $('.maze__score').addClass('game-over');\r\n    $('.maze__rooms').addClass('game-over');\r\n\r\n    // delete the background images but not the .dancing-troll\r\n    $('.maze__menu-background').not('.dancing-troll').remove();\r\n\r\n    encounterAnnounce(\"Type start to play again.\");\r\n\r\n}\r\n\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    $('#encounter').empty();\r\n    if (room.encounter) {\r\n        const encounters = Array.isArray(room.encounter) ? room.encounter : [room.encounter];\r\n\r\n        encounters.forEach(item => {\r\n            let content = '';\r\n            if (mazeEnemies.includes(item)) {\r\n                content = mazeData.enemies[item].image;\r\n                content = `<div class=\"enemy--wrapper\">${content}</div>`;\r\n            } else if (mazeTreasures.includes(item)) {\r\n                content = mazeData.treasures[item].image;\r\n            } else if (item === \"exit\") {\r\n                content = '<img src=\"./dist/assets/exit.png\" alt=\"Exit\">';\r\n            }\r\n\r\n            $(\"#encounter\").append(content);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}\r\n\r\nfunction announce(message) {\r\n    $('#announcer').text(message);\r\n}\r\n\r\nfunction encounterAnnounce(message) {\r\n    $('#encounterAnnouncer').text(message);\r\n}\r\n\r\nfunction closeDoors() {\r\n    $('.doors').addClass('closed');\r\n}\r\n\r\nfunction openDoors() {\r\n    $('.doors').removeClass('closed');\r\n}\r\n\r\nfunction resetGame() {\r\n    // Revert all hidden menu items\r\n    menuTrolls.show();\r\n    levelSelectWrapper.show();\r\n    menuHeader.show();\r\n\r\n    // remove .game-over class from the hero element, .maze__score and .maze__rooms\r\n    $('.hero').removeClass('game-over');\r\n    $('.maze__score').removeClass('game-over');\r\n    $('.maze__rooms').removeClass('game-over');\r\n\r\n    // delete the background images but not the .dancing-troll\r\n    $('.maze__menu-background').not('.dancing-troll').remove();\r\n\r\n    // Remove other classes from the hero element apart from .hero\r\n    $('.hero').attr('class', 'hero');\r\n\r\n    // Remove all images from the #encounter container\r\n    $('#encounter').empty();\r\n\r\n    // Unload Maze\r\n    maze = null;\r\n    mazeData = null;\r\n    playerPosition = { x: 0, y: 0 };\r\n    score = 0;\r\n    roomsVisited = 0;\r\n    scoreTotal.text(score);\r\n    roomsTraveled.text(roomsVisited);\r\n}\r\n"]}