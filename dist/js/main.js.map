{"version":3,"sources":["movement.js","script.js"],"names":["enterRoomFromDirection","direction","let","isEncounterInThatRoom","maze","playerPosition","y","x","encounter","animationName","$","addClass","setTimeout","removeClass","moveToCenter","enterRoom","leaveRoomInDirection","hero","fromClass","directionMap","fromNorthEncounter","fromSouthEncounter","fromEastEncounter","fromWestEncounter","hasClass","mazeData","score","duringGame","duringEncounter","question","previousAnnouncement","directions","levelSelectWrapper","levelSelect","menuTrolls","menuHeader","doors","north","east","south","west","loadMaze","level","val","ajax","url","type","dataType","success","data","initializeMaze","updateMazeVisualization","error","alert","hideMenuItems","hide","mazeSize","rooms","mazeEnemies","Object","keys","enemies","mazeTreasures","treasures","exit","getExitCoordinates","i","j","visited","getRandomInt","getDistance","handleUserInput","input","text","announce","resetGame","encounterAnnounce","includes","movePlayer","handleEncounterInput","currentRoom","encounters","currentEncounter","encounterData","action","victory","find","first","shift","value","length","openDoors","handleEncounter","newX","newY","canMoveTo","remove","append","renderMazeInConsole","displayEncounter","userInput","Array","isArray","enemyData","announcement","treasureData","max","Math","floor","random","pos1","pos2","abs","visualization","join","console","log","room","empty","forEach","item","image","message","closeDoors","show","attr","keypress","e","which","this","toLowerCase"],"mappings":"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","file":"main.js","sourcesContent":["\nfunction enterRoomFromDirection(direction) {\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n    let isEncounterInThatRoom = currentRoom.encounter !== null;\n    let animationName = '';\n\n    switch (direction) {\n        case \"north\":\n            animationName = isEncounterInThatRoom ? 'fromSouthEncounter' : 'arriveFromSouth';\n            break;\n        case \"south\":\n            animationName = isEncounterInThatRoom ? 'fromNorthEncounter' : 'arriveFromNorth';\n            break;\n        case \"east\":\n            animationName = isEncounterInThatRoom ? 'fromWestEncounter' : 'arriveFromWest';\n            break;\n        case \"west\":\n            animationName = isEncounterInThatRoom ? 'fromEastEncounter' : 'arriveFromEast';\n            break;\n    }\n\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        // if it's an encounter, dont remove the animation class\n        if (!isEncounterInThatRoom) {\n            $('.hero').removeClass(animationName);\n            moveToCenter();\n        }\n    }, 1000);\n    enterRoom();\n}\n\nfunction leaveRoomInDirection(direction) {\n    let animationName = '';\n    switch (direction) {\n        case \"north\":\n            animationName = 'leaveToNorth';\n            break;\n        case \"south\":\n            animationName = 'leaveToSouth';\n            break;\n        case \"east\":\n            animationName = 'leaveToEast';\n            break;\n        case \"west\":\n            animationName = 'leaveToWest';\n            break;\n    }\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        $('.hero').removeClass(animationName);\n    }, 1000);\n\n}\n\nfunction moveToCenter() {\n    const hero = $('.hero');\n    const directionMap = {\n        'fromNorthEncounter': 'toCenterFromNorth',\n        'fromSouthEncounter': 'toCenterFromSouth',\n        'fromEastEncounter': 'toCenterFromEast',\n        'fromWestEncounter': 'toCenterFromWest',\n    };\n\n    for (let fromClass in directionMap) {\n        if (hero.hasClass(fromClass)) {\n            hero.addClass(directionMap[fromClass])\n                .removeClass(fromClass);\n            break;\n        }\n    }\n\n    // now after animation finishes after 1 sec remove the toCenter class\n    setTimeout(function () {\n        hero.removeClass('toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest');\n    }, 1000);\n}","let mazeData = null;\r\n\r\n// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nlet duringGame = false;\r\nlet duringEncounter = false;\r\nlet question = false;\r\n\r\n// Needed to store the previous announcement when the player is asked a question\r\nlet previousAnnouncement = null;\r\n\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\nlet levelSelectWrapper = $('.maze__level-select');\r\nlet levelSelect = $('#level');\r\nlet menuTrolls = $('.maze__menu-troll');\r\nlet menuHeader = $('.menu__heading');\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\n// User input handling\r\n$(\"#userInput\").keypress(function (e) {\r\n    if (e.which === 13) { // Enter key pressed\r\n        let input = $(this).val().toLowerCase();\r\n        handleUserInput(input);\r\n        // clear the input field\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction loadMaze() {\r\n    let level = levelSelect.val();\r\n\r\n    $.ajax({\r\n        url: './maze-configs/' + level + '.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            mazeData = data;\r\n            initializeMaze(data);\r\n            updateMazeVisualization();\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n}\r\n\r\nfunction hideMenuItems() {\r\n    menuTrolls.hide();\r\n    levelSelectWrapper.hide();\r\n    menuHeader.hide();\r\n}\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    mazeEnemies = Object.keys(data.enemies);  // get enemy keys\r\n    mazeTreasures = Object.keys(data.treasures);  // get treasure keys\r\n    exit = getExitCoordinates(data);\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n\r\n    if (input === \"start\" && !duringGame) {\r\n        duringGame = true;\r\n        hideMenuItems();\r\n        loadMaze();\r\n        announce(\"You are in a maze. Try to find the exit. Type 'help' for more instructions.\");\r\n    } else if (input === \"start\" && duringGame) {\r\n        previousAnnouncement = $('#announcer').text();\r\n        announce(\"Do you want to return to the main menu? Type 'yes' or 'no'.\");\r\n        question = true;\r\n    } else if (question) {\r\n        if (input === \"yes\") {\r\n            // Reset everything\r\n            duringGame = false;\r\n            duringEncounter = false;\r\n            question = false;\r\n            resetGame();\r\n            announce(\"Game has been reset. Type 'start' to begin again.\");\r\n        } else if (input === \"no\") {\r\n            // Continue game\r\n            question = false;\r\n            announce(previousAnnouncement);\r\n        } else {\r\n            encounterAnnounce(\"Please answer with 'yes' or 'no'.\");\r\n        }\r\n    } else if (directions.includes(input)) {\r\n        // Check if the player is during an encounter. If so, notify them and prevent movement.\r\n        if (duringEncounter) {\r\n            encounterAnnounce(\"You can't leave until you've dealt with the encounter!\");\r\n        } else {\r\n            movePlayer(input);\r\n        }\r\n    } else if (duringEncounter) {\r\n        // Handle the encounter input\r\n        handleEncounterInput(input);\r\n    } else {\r\n        announce(\"Unknown command. Type 'help' for more instructions.\");\r\n    }\r\n}\r\n\r\nfunction handleEncounterInput(input) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n\r\n    if (!encounters) {\r\n        return;\r\n    }\r\n\r\n    if (typeof encounters === 'string') {\r\n        encounters = [encounters];\r\n    }\r\n\r\n    const currentEncounter = encounters[0];\r\n\r\n    // Determine if the current encounter is an enemy or a treasure\r\n    let encounterData;\r\n    if (mazeData.enemies[currentEncounter]) {\r\n        encounterData = mazeData.enemies[currentEncounter];\r\n    } else if (mazeData.treasures[currentEncounter]) {\r\n        encounterData = mazeData.treasures[currentEncounter];\r\n    } else if (currentEncounter === \"exit\") {\r\n        encounterData = { action: 'exit', victory: `You've found the exit! Congratulations.` };\r\n    }\r\n\r\n    // Check if the given input matches the required action for the current encounter\r\n    if (encounterData && input === encounterData.action) {\r\n        encounterAnnounce(encounterData.victory);\r\n\r\n        // Add 'defeated' class to the next non-defeated image\r\n        $(\"#encounter\").find(\"img:not(.defeated)\").first().addClass('defeated');\r\n\r\n        encounters.shift(); // Remove the handled encounter\r\n\r\n        if (mazeData.treasures[currentEncounter]) {\r\n            score += mazeData.treasures[currentEncounter].value; // Increment score for treasures\r\n        }\r\n\r\n        // If no more encounters are left in the room\r\n        if (encounters.length === 0) {\r\n            announce(\"Room cleared! Move on to the next room.\");\r\n            currentRoom.encounter = null;\r\n            duringEncounter = false;\r\n            moveToCenter();\r\n            openDoors();\r\n        } else {\r\n            // Otherwise, proceed to the next encounter in the list\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        encounterAnnounce(\"Wrong action! Try again.\");\r\n    }\r\n}\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n\r\n    switch (direction) {\r\n        case \"north\": newY--; break;\r\n        case \"south\": newY++; break;\r\n        case \"east\": newX++; break;\r\n        case \"west\": newX--; break;\r\n    }\r\n\r\n    if (canMoveTo(newX, newY, direction)) {\r\n        leaveRoomInDirection(direction);\r\n        setTimeout(function () {\r\n            playerPosition.x = newX;\r\n            playerPosition.y = newY;\r\n            enterRoomFromDirection(direction);\r\n        }, 1000);\r\n    } else {\r\n        announce(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction canMoveTo(x, y, direction) {\r\n    return x >= 0 && y >= 0 && x < mazeSize && y < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction];\r\n}\r\n\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    // reset encounterAnnouncer\r\n    encounterAnnounce(\"\");\r\n\r\n    if (!currentRoom.visited && currentRoom.encounter !== null) {\r\n        currentRoom.visited = true;\r\n        updateMazeVisualization();\r\n\r\n        if (currentRoom.encounter === \"exit\") {\r\n            announce(\"Congratulations! You found the exit!\");\r\n            // End game or progress to next level\r\n        } else {\r\n            duringEncounter = true;\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        announce(\"Nothing in this room\");\r\n        updateMazeVisualization();\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction handleEncounter(userInput = null) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n    if (!encounters) return;\r\n\r\n    encounters = Array.isArray(encounters) ? encounters : [encounters];\r\n    const currentEncounter = encounters[0];\r\n\r\n    if (mazeEnemies.includes(currentEncounter)) {\r\n        const enemyData = mazeData.enemies[currentEncounter];\r\n        if (userInput === null) {\r\n            announce(enemyData.announcement);\r\n        } else if (userInput === enemyData.action) {\r\n            $(\"#encounter .\" + currentEncounter).addClass('defeated');\r\n            encounters.shift();\r\n            announce(enemyData.victory);\r\n        } else {\r\n            announce(\"Wrong action! Try again.\");\r\n            return;\r\n        }\r\n    } else if (mazeTreasures.includes(currentEncounter)) {\r\n        const treasureData = mazeData.treasures[currentEncounter];\r\n        if (userInput === null) {\r\n            announce(treasureData.announcement);\r\n        } else if (userInput === treasureData.action) {\r\n            $(\"#encounter .\" + currentEncounter).addClass('defeated');\r\n            score += treasureData.value;\r\n            encounters.shift();\r\n            announce(treasureData.victory);\r\n        } else {\r\n            announce(\"Wrong action! Try again.\");\r\n            return;\r\n        }\r\n    } else if (currentEncounter === 'exit') {\r\n        // Handle the exit logic\r\n    }\r\n\r\n    if (!encounters.length) {\r\n        currentRoom.encounter = null;\r\n        moveToCenter();\r\n        duringEncounter = false;\r\n        announce(\"Room cleared!\");\r\n    }\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    $('#encounter').empty();\r\n    if (room.encounter) {\r\n        const encounters = Array.isArray(room.encounter) ? room.encounter : [room.encounter];\r\n\r\n        encounters.forEach(item => {\r\n            if (mazeEnemies.includes(item)) {\r\n                $(\"#encounter\").append(mazeData.enemies[item].image);\r\n            } else if (mazeTreasures.includes(item)) {\r\n                $(\"#encounter\").append(mazeData.treasures[item].image);\r\n            } else if (item === \"exit\") {\r\n                $(\"#encounter\").append('<img src=\"./dist/assets/exit.png\" alt=\"Exit\">');\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}\r\n\r\nfunction announce(message) {\r\n    $('#announcer').text(message);\r\n}\r\n\r\nfunction encounterAnnounce(message) {\r\n    $('#encounterAnnouncer').text(message);\r\n}\r\n\r\nfunction closeDoors() {\r\n    $('.doors').addClass('closed');\r\n}\r\n\r\nfunction openDoors() {\r\n    $('.doors').removeClass('closed');\r\n}\r\n\r\nfunction resetGame() {\r\n    // Revert all hidden menu items\r\n    menuTrolls.show();\r\n    levelSelectWrapper.show();\r\n    menuHeader.show();\r\n\r\n    // Remove other classes from the hero element apart from .hero\r\n    $('.hero').attr('class', 'hero');\r\n\r\n    // Remove all images from the #encounter container\r\n    $('#encounter').empty();\r\n\r\n    // Unload Maze\r\n    maze = null;\r\n    playerPosition = { x: 0, y: 0 };\r\n    score = 0;\r\n}"]}