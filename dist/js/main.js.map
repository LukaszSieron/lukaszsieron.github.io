{"version":3,"sources":["script.js"],"names":["let","playerPosition","x","y","score","duringGame","duringEncounter","question","directions","levelSelectWrapper","$","levelSelect","menuTrolls","menuHeader","doors","north","east","south","west","roomEncounter","white_troll","green_troll","yellow_troll","gold","emerald","diamond","exit","loadMaze","level","val","ajax","url","type","dataType","success","data","initializeMaze","updateMazeVisualization","error","alert","hideMenuItems","hide","mazeSize","maze","rooms","getExitCoordinates","i","j","visited","getRandomInt","getDistance","handleUserInput","input","announce","includes","movePlayer","handleEncounterInput","currentRoom","encounterType","encounter","encounterActions","action","message","moveToCenter","direction","newX","newY","canMoveTo","leaveRoomInDirection","setTimeout","enterRoomFromDirection","remove","append","enterRoom","handleEncounter","renderMazeInConsole","displayEncounter","userInput","requiredAction","announcement","max","Math","floor","random","pos1","pos2","abs","visualization","Array","join","console","log","room","empty","text","isEncounterInThatRoom","animationName","addClass","removeClass","hero","fromClass","directionMap","fromNorthEncounter","fromSouthEncounter","fromEastEncounter","fromWestEncounter","hasClass","keypress","e","which","this","toLowerCase"],"mappings":"AACAA,IAAAC,eAAA,CAAAC,EAAA,EAAAC,EAAA,CAAA,EACAC,MAAA,EACAC,WAAA,CAAA,EACAC,gBAAA,CAAA,EACAC,SAAA,CAAA,EACA,MAAAC,WAAA,CAAA,QAAA,QAAA,OAAA,QAEAR,IAAAS,mBAAAC,EAAA,qBAAA,EACAC,YAAAD,EAAA,QAAA,EACAE,WAAAF,EAAA,mBAAA,EACAG,WAAAH,EAAA,gBAAA,EAEA,MAAAI,MAAA,CACAC,MAAA,2CACAC,KAAA,0CACAC,MAAA,2CACAC,KAAA,yCACA,EAEAC,cAAA,CACAC,YAAA,uEACAC,YAAA,uEACAC,aAAA,yEACAC,KAAA,sDACAC,QAAA,4DACAC,QAAA,4DACAC,KAAA,+CACA,EAYA,SAAAC,WACA3B,IAAA4B,EAAAjB,YAAAkB,IAAA,EAEAnB,EAAAoB,KAAA,CACAC,IAAA,kBAAAH,EAAA,QACAI,KAAA,MACAC,SAAA,OACAC,QAAA,SAAAC,GACAC,eAAAD,CAAA,EACAE,wBAAA,CACA,EACAC,MAAA,WACAC,MAAA,sBAAA,CACA,CACA,CAAA,CACA,CAEA,SAAAC,gBACA5B,WAAA6B,KAAA,EACAhC,mBAAAgC,KAAA,EACA5B,WAAA4B,KAAA,CACA,CAEA,SAAAL,eAAAD,GACAO,SAAAP,EAAAO,SACAC,KAAAR,EAAAS,MACAlB,KAAAmB,mBAAAV,CAAA,EAGA,IAAAnC,IAAA8C,EAAA,EAAAA,EAAAJ,SAAAI,CAAA,GACA,IAAA9C,IAAA+C,EAAA,EAAAA,EAAAL,SAAAK,CAAA,GACAJ,KAAAG,GAAAC,GAAAC,QAAA,CAAA,EAIA,KACA/C,eAAAC,EAAA+C,aAAAP,QAAA,EACAzC,eAAAE,EAAA8C,aAAAP,QAAA,EACAQ,YAAAjD,eAAAyB,IAAA,EAAA,IACA,CAEA,SAAAyB,gBAAAC,GACA,UAAAA,GAAA/C,WAIA,UAAA+C,GAAA/C,YACAgD,SAAA,yDAAA,EACA9C,SAAA,CAAA,GACAC,WAAA8C,SAAAF,CAAA,EACAG,WAAAH,CAAA,EACA9C,gBAEAkD,qBAAAJ,CAAA,EAEAC,SAAA,qDAAA,GAZAhD,WAAA,CAAA,EACAmC,cAAA,EACAb,SAAA,EAYA,CAEA,SAAA6B,qBAAAJ,GACA,IAAAK,EAAAd,KAAA1C,eAAAE,GAAAF,eAAAC,GACAwD,EAAAD,EAAAE,UAGAC,EAAA,CACAxC,YAAA,CAAAyC,OAAA,QAAAC,QAAA,2CAAA,EACAzC,YAAA,CAAAwC,OAAA,OAAAC,QAAA,2CAAA,EACAxC,aAAA,CAAAuC,OAAA,QAAAC,QAAA,yDAAA,EACAvC,KAAA,CAAAsC,OAAA,UAAAC,QAAA,qBAAA,EACAtC,QAAA,CAAAqC,OAAA,OAAAC,QAAA,yBAAA,EACArC,QAAA,CAAAoC,OAAA,OAAAC,QAAA,0BAAA,EACApC,KAAA,CAAAmC,OAAA,OAAAC,QAAA,yCAAA,CACA,EAEAF,EAAAF,IAAAN,IAAAQ,EAAAF,GAAAG,QACAR,SAAAO,EAAAF,GAAAI,OAAA,EACAL,EAAAE,UAAA,KACAvD,OAAA,GACAE,gBAAA,CAAA,EACAyD,aAAA,GAEAV,SAAA,0BAAA,CAEA,CAEA,SAAAE,WAAAS,GACAhE,IAAAiE,EAAAhE,eAAAC,EACAgE,EAAAjE,eAAAE,EAEA,OAAA6D,GACA,IAAA,QAAAE,CAAA,GAAA,MACA,IAAA,QAAAA,CAAA,GAAA,MACA,IAAA,OAAAD,CAAA,GAAA,MACA,IAAA,OAAAA,CAAA,EACA,CAEAE,UAAAF,EAAAC,EAAAF,CAAA,GACAI,qBAAAJ,CAAA,EACAK,WAAA,WACApE,eAAAC,EAAA+D,EACAhE,eAAAE,EAAA+D,EACAI,uBAAAN,CAAA,CACA,EAAA,GAAA,GAEAX,SAAA,wBAAA,CAEA,CAEA,SAAAc,UAAAjE,EAAAC,EAAA6D,GACA,OAAA,GAAA9D,GAAA,GAAAC,GAAAD,EAAAwC,UAAAvC,EAAAuC,UAAAC,KAAA1C,eAAAE,GAAAF,eAAAC,GAAAY,MAAAkD,EACA,CAGA,SAAA3B,0BAEA3B,EAAA,QAAA,EAAA6D,OAAA,EAGA,IAAAd,EAAAd,KAAA1C,eAAAE,GAAAF,eAAAC,GAGA,IAAA,MAAA8D,KAAAP,EAAA3C,MACA2C,EAAA3C,MAAAkD,IACAtD,EAAA,OAAA,EAAA8D,OAAA1D,MAAAkD,EAAA,CAGA,CAEA,SAAAS,YACA,IAAAhB,EAAAd,KAAA1C,eAAAE,GAAAF,eAAAC,GAEAuD,EAAAT,SAAA,OAAAS,EAAAE,WAYAN,SAAA,sBAAA,EACAhB,wBAAA,IAZAoB,EAAAT,QAAA,CAAA,EACAX,wBAAA,EAEA,SAAAoB,EAAAE,UACAN,SAAA,sCAAA,GAGA/C,gBAAA,CAAA,EACAoE,gBAAA,IAOAC,oBAAA,EACAC,iBAAAnB,CAAA,CACA,CAEA,SAAAiB,gBAAAG,EAAA,MACA,IAAA3E,EAAAD,eAAAC,EACAC,EAAAF,eAAAE,EACAwD,EAAAhB,KAAAxC,GAAAD,GAAAyD,UAEA,GAAAA,EAAA,CAKA3D,IAAA8E,EAAA,KACAC,EAAA,KAEA,OAAApB,GACA,IAAA,UACAoB,EAAA,6DACAD,EAAA,OACA,MACA,IAAA,cACAC,EAAA,wDACAD,EAAA,QACA,MACA,IAAA,UACAC,EAAA,8DACAD,EAAA,OACA,MACA,IAAA,cACAC,EAAA,8DACAD,EAAA,OACA,MACA,IAAA,eACAC,EAAA,oFACAD,EAAA,QACA,MACA,IAAA,OACAC,EAAA,0DACAD,EAAA,UACA,MACA,IAAA,OACAC,EAAA,+CACAD,EAAA,OACA,MACA,QACAC,EAAA,oBACA,CAGA,GAAA,OAAAF,EACAxB,SAAA0B,CAAA,OAKA,GAAAF,IAAAC,EAAA,CACA,OAAAnB,GACA,IAAA,UACA,IAAA,UACA,IAAA,OACAvD,OAAA,EAGA,CAEAuC,KAAAxC,GAAAD,GAAAyD,UAAA,KACAI,aAAA,EACAzD,gBAAA,CAAA,EACA+C,qCAAAM,IAAA,CACA,MACAN,SAAA,0BAAA,CA5DA,MAFAA,SAAA,wCAAA,CAgEA,CAEA,SAAAJ,aAAA+B,GACA,OAAAC,KAAAC,MAAAD,KAAAE,OAAA,EAAAH,CAAA,CACA,CAEA,SAAA9B,YAAAkC,EAAAC,GACA,OAAAJ,KAAAK,IAAAF,EAAAlF,EAAAmF,EAAAnF,CAAA,EAAA+E,KAAAK,IAAAF,EAAAjF,EAAAkF,EAAAlF,CAAA,CACA,CAEA,SAAAwE,sBACA3E,IAAAuF,EAAA,GAEA,IAAAvF,IAAA8C,EAAA,EAAAA,EAAAJ,SAAAI,CAAA,GAAA,CACA,IAAA9C,IAAA+C,EAAA,EAAAA,EAAAL,SAAAK,CAAA,GACA,GAAAA,IACAwC,GAAA,KAGAtF,eAAAE,GAAA2C,GAAA7C,eAAAC,GAAA6C,EACAwC,GAAA,MAEAA,GAAA,MAGAA,GAAA,IAIAA,GAFAA,GAAA,MACAC,MAAA,EAAA9C,SAAA,CAAA,EAAA+C,KAAA,GAAA,EACA,IACA,CAEAC,QAAAC,IAAAJ,CAAA,CACA,CAEA,SAAAX,iBAAAgB,GAEAlF,EAAA,YAAA,EAAAmF,MAAA,EAEAnC,EAAAkC,EAAAjC,UACAD,GAAAvC,cAAAuC,IACAhD,EAAA,YAAA,EAAA8D,OAAArD,cAAAuC,EAAA,CAEA,CAEA,SAAAb,mBAAAV,GACA,IAAAnC,IAAA8C,EAAA,EAAAA,EAAAX,EAAAO,SAAAI,CAAA,GACA,IAAA9C,IAAA+C,EAAA,EAAAA,EAAAZ,EAAAO,SAAAK,CAAA,GACA,GAAA,SAAAZ,EAAAS,MAAAE,GAAAC,GAAAY,UACA,MAAA,CAAAzD,EAAA6C,EAAA5C,EAAA2C,CAAA,EAIA,OAAA,IACA,CAEA,SAAAO,SAAAS,GACApD,EAAA,YAAA,EAAAoF,KAAAhC,CAAA,CACA,CAEA,SAAAQ,uBAAAN,GAEAhE,IAAA+F,EAAA,OADApD,KAAA1C,eAAAE,GAAAF,eAAAC,GACAyD,UACAqC,EAAA,GAEA,OAAAhC,GACA,IAAA,QACAgC,EAAAD,EAAA,qBAAA,kBACA,MACA,IAAA,QACAC,EAAAD,EAAA,qBAAA,kBACA,MACA,IAAA,OACAC,EAAAD,EAAA,oBAAA,iBACA,MACA,IAAA,OACAC,EAAAD,EAAA,oBAAA,gBAEA,CAEArF,EAAA,OAAA,EAAAuF,SAAAD,CAAA,EAEA3B,WAAA,WAEA0B,IACArF,EAAA,OAAA,EAAAwF,YAAAF,CAAA,EACAjC,aAAA,EAEA,EAAA,GAAA,EACAU,UAAA,CACA,CAEA,SAAAL,qBAAAJ,GACAhE,IAAAgG,EAAA,GACA,OAAAhC,GACA,IAAA,QACAgC,EAAA,eACA,MACA,IAAA,QACAA,EAAA,eACA,MACA,IAAA,OACAA,EAAA,cACA,MACA,IAAA,OACAA,EAAA,aAEA,CACAtF,EAAA,OAAA,EAAAuF,SAAAD,CAAA,EAEA3B,WAAA,WACA3D,EAAA,OAAA,EAAAwF,YAAAF,CAAA,CACA,EAAA,GAAA,CAEA,CAEA,SAAAjC,eACA,MAAAoC,EAAAzF,EAAA,OAAA,EACA,IAOA0F,EAPAC,EAAA,CACAC,mBAAA,oBACAC,mBAAA,oBACAC,kBAAA,mBACAC,kBAAA,kBACA,EAEA,IAAAL,KAAAC,EACA,GAAAF,EAAAO,SAAAN,CAAA,EAAA,CACAD,EAAAF,SAAAI,EAAAD,EAAA,EACAF,YAAAE,CAAA,EACA,KACA,CAIA/B,WAAA,WACA8B,EAAAD,YAAA,uEAAA,CACA,EAAA,GAAA,CACA,CA/WAxF,EAAA,YAAA,EAAAiG,SAAA,SAAAC,GACA,KAAAA,EAAAC,QAEA1D,gBADAzC,EAAAoG,IAAA,EAAAjF,IAAA,EAAAkF,YAAA,CACA,EAEArG,EAAAoG,IAAA,EAAAjF,IAAA,EAAA,EAEA,CAAA","file":"main.js","sourcesContent":["// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nlet duringGame = false;\r\nlet duringEncounter = false;\r\nlet question = false;\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\nlet levelSelectWrapper = $('.maze__level-select');\r\nlet levelSelect = $('#level');\r\nlet menuTrolls = $('.maze__menu-troll');\r\nlet menuHeader = $('.menu__heading');\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\nconst roomEncounter = {\r\n    white_troll: '<img src=\"./dist/assets/monsters/white-troll.png\" alt=\"White troll\">',\r\n    green_troll: '<img src=\"./dist/assets/monsters/green-troll.png\" alt=\"Green troll\">',\r\n    yellow_troll: '<img src=\"./dist/assets/monsters/yellow-troll.png\" alt=\"Yellow troll\">',\r\n    gold: '<img src=\"./dist/assets/items/gold.png\" alt=\"Gold\">',\r\n    emerald: '<img src=\"./dist/assets/items/emerald.png\" alt=\"Emerald\">',\r\n    diamond: '<img src=\"./dist/assets/items/diamond.png\" alt=\"Diamond\">',\r\n    exit: '<img src=\"./dist/assets/exit.png\" alt=\"Exit\">'\r\n}\r\n\r\n// User input handling\r\n$(\"#userInput\").keypress(function (e) {\r\n    if (e.which === 13) { // Enter key pressed\r\n        let input = $(this).val().toLowerCase();\r\n        handleUserInput(input);\r\n        // clear the input field\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction loadMaze() {\r\n    let level = levelSelect.val();\r\n\r\n    $.ajax({\r\n        url: './maze-configs/' + level + '.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            initializeMaze(data);\r\n            updateMazeVisualization();\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n}\r\n\r\nfunction hideMenuItems() {\r\n    menuTrolls.hide();\r\n    levelSelectWrapper.hide();\r\n    menuHeader.hide();\r\n}\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    exit = getExitCoordinates(data);\r\n\r\n    // Further maze initializations like marking rooms as unvisited can go here\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n    if (input === \"start\" && !duringGame) {\r\n        duringGame = true;\r\n        hideMenuItems();\r\n        loadMaze();\r\n    } else if (input === \"start\" && duringGame) {\r\n        announce(\"Do you want to return to main menu? Type 'yes' or 'no'.\");\r\n        question = true;\r\n    } else if (directions.includes(input)) {\r\n        movePlayer(input);\r\n    } else if (duringEncounter) {\r\n        // Handle the encounter input\r\n        handleEncounterInput(input);\r\n    } else {\r\n        announce(\"Unknown command. Type 'help' for more instructions.\");\r\n    }\r\n}\r\n\r\nfunction handleEncounterInput(input) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    const encounterType = currentRoom.encounter;\r\n\r\n    // Use an object to map user input to a particular action for an encounter type\r\n    const encounterActions = {\r\n        'white_troll': { action: 'punch', message: 'You punched the white troll! It ran away.' },\r\n        'green_troll': { action: 'kick', message: 'You kicked the green troll! Its gone now.' },\r\n        'yellow_troll': { action: 'throw', message: 'You threw a stone at the yellow troll! Its scared away.' },\r\n        'gold': { action: 'collect', message: `You collected gold!` },\r\n        'emerald': { action: 'grab', message: `You grabbed an emerald!` },\r\n        'diamond': { action: 'pick', message: `You picked up a diamond!` },\r\n        'exit': { action: 'exit', message: `You've found the exit! Congratulations.` }\r\n    };\r\n\r\n    if (encounterActions[encounterType] && input === encounterActions[encounterType].action) {\r\n        announce(encounterActions[encounterType].message);\r\n        currentRoom.encounter = null; // Remove the encounter\r\n        score += 10; // Increment score\r\n        duringEncounter = false;\r\n        moveToCenter();\r\n    } else {\r\n        announce(\"Wrong action! Try again.\");\r\n    }\r\n}\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n\r\n    switch (direction) {\r\n        case \"north\": newY--; break;\r\n        case \"south\": newY++; break;\r\n        case \"east\": newX++; break;\r\n        case \"west\": newX--; break;\r\n    }\r\n\r\n    if (canMoveTo(newX, newY, direction)) {\r\n        leaveRoomInDirection(direction);\r\n        setTimeout(function () {\r\n            playerPosition.x = newX;\r\n            playerPosition.y = newY;\r\n            enterRoomFromDirection(direction);\r\n        }, 1000);\r\n    } else {\r\n        announce(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction canMoveTo(x, y, direction) {\r\n    return x >= 0 && y >= 0 && x < mazeSize && y < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction];\r\n}\r\n\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    if (!currentRoom.visited && currentRoom.encounter !== null) {\r\n        currentRoom.visited = true;\r\n        updateMazeVisualization();\r\n\r\n        if (currentRoom.encounter === \"exit\") {\r\n            announce(\"Congratulations! You found the exit!\");\r\n            // End game or progress to next level\r\n        } else {\r\n            duringEncounter = true;\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        announce(\"Nothing in this room\");\r\n        updateMazeVisualization();\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction handleEncounter(userInput = null) {\r\n    const x = playerPosition.x;\r\n    const y = playerPosition.y;\r\n    const encounter = maze[y][x].encounter;\r\n\r\n    if (!encounter) {\r\n        announce(\"The room is empty. Nothing to do here.\");\r\n        return;\r\n    }\r\n\r\n    let requiredAction = null;\r\n    let announcement = null;\r\n\r\n    switch (encounter) {\r\n        case 'diamond':\r\n            announcement = \"You've found a shining diamond! Type 'pick' to pick it up!\";\r\n            requiredAction = \"pick\";\r\n            break;\r\n        case 'white_troll':\r\n            announcement = \"You spotted a white troll! Type 'punch' to defeat it!\";\r\n            requiredAction = \"punch\";\r\n            break;\r\n        case 'emerald':\r\n            announcement = \"You've found a gleaming emerald! Type 'grab' to pick it up!\";\r\n            requiredAction = \"grab\";\r\n            break;\r\n        case 'green_troll':\r\n            announcement = \"You encountered a green troll! Type 'kick' to kick it away!\";\r\n            requiredAction = \"kick\";\r\n            break;\r\n        case 'yellow_troll':\r\n            announcement = \"Beware! A yellow troll is blocking your way! Type 'throw' to throw a stone at it!\";\r\n            requiredAction = \"throw\";\r\n            break;\r\n        case 'gold':\r\n            announcement = \"Golden treasures await! Type 'collect' to collect them!\";\r\n            requiredAction = \"collect\";\r\n            break;\r\n        case 'exit':\r\n            announcement = \"You've found the exit! Type 'exit' to leave.\";\r\n            requiredAction = \"exit\";\r\n            break;\r\n        default:\r\n            announcement = \"Unknown encounter!\";\r\n    }\r\n\r\n    // If userInput is null, it means this is the first time player has entered the room\r\n    if (userInput === null) {\r\n        announce(announcement);\r\n        return;\r\n    }\r\n\r\n    // If userInput matches the required action\r\n    if (userInput === requiredAction) {\r\n        switch (encounter) {\r\n            case 'diamond':\r\n            case 'emerald':\r\n            case 'gold':\r\n                score += 10; // Increment score as you deem fit\r\n                break;\r\n            // For trolls or other enemies, you might decrease health or handle other game mechanics\r\n        }\r\n\r\n        maze[y][x].encounter = null;  // Remove the encounter from the room\r\n        moveToCenter();               // Move hero to center of the room\r\n        duringEncounter = false;     // Clear the encounter flag\r\n        announce(`Successfully handled the ${encounter}.`); // Notify player\r\n    } else {\r\n        announce(\"Wrong action! Try again.\");\r\n    }\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    // Clear any existing encounters from the previous room\r\n    $('#encounter').empty();\r\n\r\n    const encounterType = room.encounter;\r\n    if (encounterType && roomEncounter[encounterType]) {\r\n        $(\"#encounter\").append(roomEncounter[encounterType]);\r\n    }\r\n}\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}\r\n\r\nfunction announce(message) {\r\n    $('#announcer').text(message);\r\n}\r\n\r\nfunction enterRoomFromDirection(direction) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let isEncounterInThatRoom = currentRoom.encounter !== null;\r\n    let animationName = '';\r\n\r\n    switch (direction) {\r\n        case \"north\":\r\n            animationName = isEncounterInThatRoom ? 'fromSouthEncounter' : 'arriveFromSouth';\r\n            break;\r\n        case \"south\":\r\n            animationName = isEncounterInThatRoom ? 'fromNorthEncounter' : 'arriveFromNorth';\r\n            break;\r\n        case \"east\":\r\n            animationName = isEncounterInThatRoom ? 'fromWestEncounter' : 'arriveFromWest';\r\n            break;\r\n        case \"west\":\r\n            animationName = isEncounterInThatRoom ? 'fromEastEncounter' : 'arriveFromEast';\r\n            break;\r\n    }\r\n\r\n    $('.hero').addClass(animationName);\r\n    // Wait for the animation to finish\r\n    setTimeout(function () {\r\n        // if it's an encounter, dont remove the animation class\r\n        if (!isEncounterInThatRoom) {\r\n            $('.hero').removeClass(animationName);\r\n            moveToCenter();\r\n        }\r\n    }, 1000);\r\n    enterRoom();\r\n}\r\n\r\nfunction leaveRoomInDirection(direction) {\r\n    let animationName = '';\r\n    switch (direction) {\r\n        case \"north\":\r\n            animationName = 'leaveToNorth';\r\n            break;\r\n        case \"south\":\r\n            animationName = 'leaveToSouth';\r\n            break;\r\n        case \"east\":\r\n            animationName = 'leaveToEast';\r\n            break;\r\n        case \"west\":\r\n            animationName = 'leaveToWest';\r\n            break;\r\n    }\r\n    $('.hero').addClass(animationName);\r\n    // Wait for the animation to finish\r\n    setTimeout(function () {\r\n        $('.hero').removeClass(animationName);\r\n    }, 1000);\r\n\r\n}\r\n\r\nfunction moveToCenter() {\r\n    const hero = $('.hero');\r\n    const directionMap = {\r\n        'fromNorthEncounter': 'toCenterFromNorth',\r\n        'fromSouthEncounter': 'toCenterFromSouth',\r\n        'fromEastEncounter': 'toCenterFromEast',\r\n        'fromWestEncounter': 'toCenterFromWest',\r\n    };\r\n\r\n    for (let fromClass in directionMap) {\r\n        if (hero.hasClass(fromClass)) {\r\n            hero.addClass(directionMap[fromClass])\r\n                .removeClass(fromClass);\r\n            break;\r\n        }\r\n    }\r\n\r\n    // now after animation finishes after 1 sec remove the toCenter class\r\n    setTimeout(function () {\r\n        hero.removeClass('toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest');\r\n    }, 1000);\r\n}"]}