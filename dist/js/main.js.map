{"version":3,"sources":["movement.js","script.js"],"names":["enterRoomFromDirection","direction","let","isEncounterInThatRoom","maze","playerPosition","y","x","encounter","animationName","$","addClass","setTimeout","removeClass","moveToCenter","enterRoom","leaveRoomInDirection","hero","fromClass","directionMap","fromNorthEncounter","fromSouthEncounter","fromEastEncounter","fromWestEncounter","hasClass","score","duringGame","duringEncounter","question","previousAnnouncement","directions","levelSelectWrapper","levelSelect","menuTrolls","menuHeader","doors","north","east","south","west","roomEncounter","white_troll","green_troll","yellow_troll","gold","emerald","diamond","exit","loadMaze","level","val","ajax","url","type","dataType","success","data","initializeMaze","updateMazeVisualization","error","alert","hideMenuItems","hide","mazeSize","rooms","mazeEnemies","enemies","mazeTreasures","treasures","getExitCoordinates","i","j","visited","getRandomInt","getDistance","handleUserInput","input","text","announce","resetGame","encounterAnnounce","includes","movePlayer","handleEncounterInput","encounterActions","currentEncounter","currentRoom","encounters","action","message","find","first","shift","length","openDoors","handleEncounter","newX","newY","canMoveTo","remove","append","renderMazeInConsole","displayEncounter","userInput","enemiesInRoom","filter","item","treasuresInRoom","enemy","enemyAction","getRequiredActionForEncounter","announcement","requiredAction","treasure","treasureAction","max","Math","floor","random","pos1","pos2","abs","visualization","Array","join","console","log","room","empty","isArray","forEach","closeDoors","show","attr","keypress","e","which","this","toLowerCase"],"mappings":"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","file":"main.js","sourcesContent":["\nfunction enterRoomFromDirection(direction) {\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n    let isEncounterInThatRoom = currentRoom.encounter !== null;\n    let animationName = '';\n\n    switch (direction) {\n        case \"north\":\n            animationName = isEncounterInThatRoom ? 'fromSouthEncounter' : 'arriveFromSouth';\n            break;\n        case \"south\":\n            animationName = isEncounterInThatRoom ? 'fromNorthEncounter' : 'arriveFromNorth';\n            break;\n        case \"east\":\n            animationName = isEncounterInThatRoom ? 'fromWestEncounter' : 'arriveFromWest';\n            break;\n        case \"west\":\n            animationName = isEncounterInThatRoom ? 'fromEastEncounter' : 'arriveFromEast';\n            break;\n    }\n\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        // if it's an encounter, dont remove the animation class\n        if (!isEncounterInThatRoom) {\n            $('.hero').removeClass(animationName);\n            moveToCenter();\n        }\n    }, 1000);\n    enterRoom();\n}\n\nfunction leaveRoomInDirection(direction) {\n    let animationName = '';\n    switch (direction) {\n        case \"north\":\n            animationName = 'leaveToNorth';\n            break;\n        case \"south\":\n            animationName = 'leaveToSouth';\n            break;\n        case \"east\":\n            animationName = 'leaveToEast';\n            break;\n        case \"west\":\n            animationName = 'leaveToWest';\n            break;\n    }\n    $('.hero').addClass(animationName);\n    // Wait for the animation to finish\n    setTimeout(function () {\n        $('.hero').removeClass(animationName);\n    }, 1000);\n\n}\n\nfunction moveToCenter() {\n    const hero = $('.hero');\n    const directionMap = {\n        'fromNorthEncounter': 'toCenterFromNorth',\n        'fromSouthEncounter': 'toCenterFromSouth',\n        'fromEastEncounter': 'toCenterFromEast',\n        'fromWestEncounter': 'toCenterFromWest',\n    };\n\n    for (let fromClass in directionMap) {\n        if (hero.hasClass(fromClass)) {\n            hero.addClass(directionMap[fromClass])\n                .removeClass(fromClass);\n            break;\n        }\n    }\n\n    // now after animation finishes after 1 sec remove the toCenter class\n    setTimeout(function () {\n        hero.removeClass('toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest');\n    }, 1000);\n}","// Global variables\r\nlet playerPosition = { x: 0, y: 0 };\r\nlet score = 0;\r\nlet duringGame = false;\r\nlet duringEncounter = false;\r\nlet question = false;\r\n\r\n// Needed to store the previous announcement when the player is asked a question\r\nlet previousAnnouncement = null;\r\n\r\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\r\n\r\nlet levelSelectWrapper = $('.maze__level-select');\r\nlet levelSelect = $('#level');\r\nlet menuTrolls = $('.maze__menu-troll');\r\nlet menuHeader = $('.menu__heading');\r\n\r\nconst doors = {\r\n    north: '<span class=\"doors doors--north\"></span>',\r\n    east: '<span class=\"doors doors--east\"></span>',\r\n    south: '<span class=\"doors doors--south\"></span>',\r\n    west: '<span class=\"doors doors--west\"></span>'\r\n}\r\n\r\nconst roomEncounter = {\r\n    white_troll: '<img class=\"enemy white_troll\" src=\"./dist/assets/monsters/white-troll.png\" alt=\"White troll\">',\r\n    green_troll: '<img class=\"enemy green_troll\" src=\"./dist/assets/monsters/green-troll.png\" alt=\"Green troll\">',\r\n    yellow_troll: '<img class=\"enemy yellow_troll\" src=\"./dist/assets/monsters/yellow-troll.png\" alt=\"Yellow troll\">',\r\n    gold: '<img class=\"reward gold\" src=\"./dist/assets/items/gold.png\" alt=\"Gold\">',\r\n    emerald: '<img class=\"reward emerald\" src=\"./dist/assets/items/emerald.png\" alt=\"Emerald\">',\r\n    diamond: '<img class=\"reward diamond\" src=\"./dist/assets/items/diamond.png\" alt=\"Diamond\">',\r\n    exit: '<img src=\"./dist/assets/exit.png\" alt=\"Exit\">'\r\n}\r\n\r\n// User input handling\r\n$(\"#userInput\").keypress(function (e) {\r\n    if (e.which === 13) { // Enter key pressed\r\n        let input = $(this).val().toLowerCase();\r\n        handleUserInput(input);\r\n        // clear the input field\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction loadMaze() {\r\n    let level = levelSelect.val();\r\n\r\n    $.ajax({\r\n        url: './maze-configs/' + level + '.json',\r\n        type: 'GET',\r\n        dataType: 'json',\r\n        success: function (data) {\r\n            initializeMaze(data);\r\n            updateMazeVisualization();\r\n        },\r\n        error: function () {\r\n            alert('Failed to load maze.');\r\n        }\r\n    });\r\n}\r\n\r\nfunction hideMenuItems() {\r\n    menuTrolls.hide();\r\n    levelSelectWrapper.hide();\r\n    menuHeader.hide();\r\n}\r\n\r\nfunction initializeMaze(data) {\r\n    mazeSize = data.mazeSize;\r\n    maze = data.rooms;\r\n    mazeEnemies = data.enemies;\r\n    mazeTreasures = data.treasures;\r\n    exit = getExitCoordinates(data);\r\n\r\n    // Further maze initializations like marking rooms as unvisited can go here\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            maze[i][j].visited = false;\r\n        }\r\n    }\r\n\r\n    do {\r\n        playerPosition.x = getRandomInt(mazeSize);\r\n        playerPosition.y = getRandomInt(mazeSize);\r\n    } while (getDistance(playerPosition, exit) < 3);\r\n}\r\n\r\nfunction handleUserInput(input) {\r\n\r\n    if (input === \"start\" && !duringGame) {\r\n        duringGame = true;\r\n        hideMenuItems();\r\n        loadMaze();\r\n        announce(\"You are in a maze. Try to find the exit. Type 'help' for more instructions.\");\r\n    } else if (input === \"start\" && duringGame) {\r\n        previousAnnouncement = $('#announcer').text();\r\n        announce(\"Do you want to return to the main menu? Type 'yes' or 'no'.\");\r\n        question = true;\r\n    } else if (question) {\r\n        if (input === \"yes\") {\r\n            // Reset everything\r\n            duringGame = false;\r\n            duringEncounter = false;\r\n            question = false;\r\n            resetGame();\r\n            announce(\"Game has been reset. Type 'start' to begin again.\");\r\n        } else if (input === \"no\") {\r\n            // Continue game\r\n            question = false;\r\n            announce(previousAnnouncement);\r\n        } else {\r\n            encounterAnnounce(\"Please answer with 'yes' or 'no'.\");\r\n        }\r\n    } else if (directions.includes(input)) {\r\n        // Check if the player is during an encounter. If so, notify them and prevent movement.\r\n        if (duringEncounter) {\r\n            encounterAnnounce(\"You can't leave until you've dealt with the encounter!\");\r\n        } else {\r\n            movePlayer(input);\r\n        }\r\n    } else if (duringEncounter) {\r\n        // Handle the encounter input\r\n        handleEncounterInput(input);\r\n    } else {\r\n        announce(\"Unknown command. Type 'help' for more instructions.\");\r\n    }\r\n}\r\n\r\nfunction handleEncounterInput(input) {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n    let encounters = currentRoom.encounter;\r\n\r\n    if (!encounters) {\r\n        return;\r\n    }\r\n\r\n    if (typeof encounters === 'string') {\r\n        encounters = [encounters];\r\n    }\r\n\r\n    const encounterActions = {\r\n        'white_troll': { action: 'punch', message: 'You punched the white troll! It ran away.' },\r\n        'green_troll': { action: 'kick', message: 'You kicked the green troll! Its gone now.' },\r\n        'yellow_troll': { action: 'throw', message: 'You threw a stone at the yellow troll! Its scared away.' },\r\n        'gold': { action: 'collect', message: `You collected gold!` },\r\n        'emerald': { action: 'grab', message: `You grabbed an emerald!` },\r\n        'diamond': { action: 'pick', message: `You picked up a diamond!` },\r\n        'exit': { action: 'exit', message: `You've found the exit! Congratulations.` }\r\n    };\r\n\r\n    const currentEncounter = encounters[0];\r\n\r\n    // Check if the given input matches the required action for the current encounter\r\n    if (encounterActions[currentEncounter] && input === encounterActions[currentEncounter].action) {\r\n        announce(encounterActions[currentEncounter].message);\r\n\r\n        // Add 'defeated' class to the next non-defeated image\r\n        $(\"#encounter\").find(\"img:not(.defeated)\").first().addClass('defeated');\r\n\r\n        encounters.shift(); // Remove the handled encounter\r\n\r\n        if (mazeTreasures.includes(currentEncounter)) {\r\n            score += 10; // Increment score for treasures\r\n        }\r\n\r\n        // If no more encounters are left in the room\r\n        if (encounters.length === 0) {\r\n            currentRoom.encounter = null;\r\n            duringEncounter = false;\r\n            moveToCenter();\r\n            openDoors();\r\n        } else {\r\n            // Otherwise, proceed to the next encounter in the list\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        encounterAnnounce(\"Wrong action! Try again.\");\r\n    }\r\n}\r\n\r\n\r\nfunction movePlayer(direction) {\r\n    let newX = playerPosition.x;\r\n    let newY = playerPosition.y;\r\n\r\n    switch (direction) {\r\n        case \"north\": newY--; break;\r\n        case \"south\": newY++; break;\r\n        case \"east\": newX++; break;\r\n        case \"west\": newX--; break;\r\n    }\r\n\r\n    if (canMoveTo(newX, newY, direction)) {\r\n        leaveRoomInDirection(direction);\r\n        setTimeout(function () {\r\n            playerPosition.x = newX;\r\n            playerPosition.y = newY;\r\n            enterRoomFromDirection(direction);\r\n        }, 1000);\r\n    } else {\r\n        announce(\"You can't go that way!\");\r\n    }\r\n}\r\n\r\nfunction canMoveTo(x, y, direction) {\r\n    return x >= 0 && y >= 0 && x < mazeSize && y < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction];\r\n}\r\n\r\n\r\nfunction updateMazeVisualization() {\r\n    // Clear any existing door elements from the previous room\r\n    $('.doors').remove();\r\n\r\n    // Fetch the current room based on player's position\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    // Check for available doors and inject them into the maze\r\n    for (const direction in currentRoom.doors) {\r\n        if (currentRoom.doors[direction]) {\r\n            $(\"#maze\").append(doors[direction]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enterRoom() {\r\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\r\n\r\n    if (!currentRoom.visited && currentRoom.encounter !== null) {\r\n        currentRoom.visited = true;\r\n        updateMazeVisualization();\r\n\r\n        if (currentRoom.encounter === \"exit\") {\r\n            announce(\"Congratulations! You found the exit!\");\r\n            // End game or progress to next level\r\n        } else {\r\n            duringEncounter = true;\r\n            handleEncounter();\r\n        }\r\n    } else {\r\n        announce(\"Nothing in this room\");\r\n        updateMazeVisualization();\r\n    }\r\n\r\n    renderMazeInConsole();\r\n    displayEncounter(currentRoom);\r\n}\r\n\r\nfunction handleEncounter(userInput = null) {\r\n    const x = playerPosition.x;\r\n    const y = playerPosition.y;\r\n    let encounters = maze[y][x].encounter;\r\n\r\n    if (!encounters || encounters.length === 0) {\r\n        announce(\"The room is empty. Nothing to do here.\");\r\n        return;\r\n    }\r\n\r\n    if (typeof encounters === 'string') {\r\n        encounters = [encounters];\r\n    }\r\n\r\n    const enemiesInRoom = encounters.filter(item => mazeEnemies.includes(item));\r\n    const treasuresInRoom = encounters.filter(item => mazeTreasures.includes(item));\r\n\r\n    // Handle enemies first\r\n    if (enemiesInRoom.length > 0) {\r\n        const enemy = enemiesInRoom[0];\r\n        const enemyAction = getRequiredActionForEncounter(enemy);\r\n\r\n        if (userInput === null) {\r\n            announce(enemyAction.announcement);\r\n            return;\r\n        }\r\n\r\n        if (userInput === enemyAction.requiredAction) {\r\n            $(`#encounter .${enemy}`).addClass('defeated'); // Mark the enemy as defeated\r\n            enemiesInRoom.shift(); // Remove the defeated enemy\r\n        } else {\r\n            announce(\"Wrong action! Try again.\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Handle treasures if no more enemies left\r\n    if (enemiesInRoom.length === 0) {\r\n        if (treasuresInRoom.length > 0) {\r\n            const treasure = treasuresInRoom[0];\r\n            const treasureAction = getRequiredActionForEncounter(treasure);\r\n\r\n            if (userInput === null) {\r\n                announce(treasureAction.announcement);\r\n                return;\r\n            }\r\n\r\n            if (userInput === treasureAction.requiredAction) {\r\n                $(`#encounter .${treasure}`).addClass('defeated'); // Mark the treasure as collected\r\n                treasuresInRoom.shift(); // Remove the collected treasure\r\n                score += 10; // Increment score\r\n            } else {\r\n                announce(\"Wrong action! Try again.\");\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (enemiesInRoom.length === 0 && treasuresInRoom.length === 0) {\r\n        maze[y][x].encounter = null;  // Remove the encounter from the room\r\n        moveToCenter();               // Move hero to center of the room\r\n        duringEncounter = false;     // Clear the encounter flag\r\n        announce(\"Room cleared!\");\r\n    }\r\n}\r\n\r\nfunction getRequiredActionForEncounter(encounter) {\r\n    switch (encounter) {\r\n        case 'diamond':\r\n            return { announcement: \"You've found a shining diamond! Type 'pick' to pick it up!\", requiredAction: \"pick\" };\r\n        case 'white_troll':\r\n            return { announcement: \"You spotted a white troll! Type 'punch' to defeat it!\", requiredAction: \"punch\" };\r\n        case 'emerald':\r\n            return { announcement: \"You've found a gleaming emerald! Type 'grab' to pick it up!\", requiredAction: \"grab\" };\r\n        case 'green_troll':\r\n            return { announcement: \"You encountered a green troll! Type 'kick' to kick it away!\", requiredAction: \"kick\" };\r\n        case 'yellow_troll':\r\n            return { announcement: \"Beware! A yellow troll is blocking your way! Type 'throw' to throw a stone at it!\", requiredAction: \"throw\" };\r\n        case 'gold':\r\n            return { announcement: \"Golden treasures await! Type 'collect' to collect them!\", requiredAction: \"collect\" };\r\n        case 'exit':\r\n            return { announcement: \"You've found the exit! Type 'exit' to leave.\", requiredAction: \"exit\" };\r\n        default:\r\n            return { announcement: \"Unknown encounter!\", requiredAction: null };\r\n    }\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction getDistance(pos1, pos2) {\r\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\r\n}\r\n\r\nfunction renderMazeInConsole() {\r\n    let visualization = \"\";\r\n\r\n    for (let i = 0; i < mazeSize; i++) {\r\n        for (let j = 0; j < mazeSize; j++) {\r\n            if (j == 0) {\r\n                visualization += \"|\";\r\n            }\r\n\r\n            if (playerPosition.y == i && playerPosition.x == j) {\r\n                visualization += \" X \";\r\n            } else {\r\n                visualization += \"   \";\r\n            }\r\n\r\n            visualization += \"|\";\r\n        }\r\n        visualization += \"\\n\";\r\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\r\n        visualization += \"\\n\";\r\n    }\r\n\r\n    console.log(visualization);\r\n}\r\n\r\nfunction displayEncounter(room) {\r\n    // Clear any existing encounters from the previous room\r\n    $('#encounter').empty();\r\n\r\n    // Ensure the encounter is not null and it's an array or a string\r\n    if (room.encounter) {\r\n        // Convert the encounter to an array if it's a string\r\n        const encounters = Array.isArray(room.encounter) ? room.encounter : [room.encounter];\r\n\r\n        // Split encounters into enemies and treasures\r\n        const enemiesInRoom = encounters.filter(item => mazeEnemies.includes(item));\r\n        const treasuresInRoom = encounters.filter(item => mazeTreasures.includes(item));\r\n\r\n        // Display enemies first\r\n        enemiesInRoom.forEach(enemy => {\r\n            if (roomEncounter[enemy]) {\r\n                $(\"#encounter\").append(roomEncounter[enemy]);\r\n            }\r\n        });\r\n\r\n        // Then display treasures\r\n        treasuresInRoom.forEach(treasure => {\r\n            if (roomEncounter[treasure]) {\r\n                $(\"#encounter\").append(roomEncounter[treasure]);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction getExitCoordinates(data) {\r\n    for (let i = 0; i < data.mazeSize; i++) {\r\n        for (let j = 0; j < data.mazeSize; j++) {\r\n            if (data.rooms[i][j].encounter === \"exit\") {\r\n                return { x: j, y: i };\r\n            }\r\n        }\r\n    }\r\n    return null; // This will return null if no exit is found, but in a well-designed game, there should always be an exit.\r\n}\r\n\r\nfunction announce(message) {\r\n    $('#announcer').text(message);\r\n}\r\n\r\nfunction encounterAnnounce(message) {\r\n    $('#encounterAnnouncer').text(message);\r\n}\r\n\r\nfunction closeDoors() {\r\n    $('.doors').addClass('closed');\r\n}\r\n\r\nfunction openDoors() {\r\n    $('.doors').removeClass('closed');\r\n}\r\n\r\nfunction resetGame() {\r\n    // Revert all hidden menu items\r\n    menuTrolls.show();\r\n    levelSelectWrapper.show();\r\n    menuHeader.show();\r\n\r\n    // Remove other classes from the hero element apart from .hero\r\n    $('.hero').attr('class', 'hero');\r\n\r\n    // Remove all images from the #encounter container\r\n    $('#encounter').empty();\r\n\r\n    // Unload Maze\r\n    maze = null;\r\n    playerPosition = { x: 0, y: 0 };\r\n    score = 0;\r\n}"]}