{"version":3,"sources":["script.js"],"names":["let","playerPosition","x","y","score","directions","doors","north","east","south","west","roomEncounter","white_troll","green_troll","yellow_troll","gold","emerald","diamond","initializeMaze","data","mazeSize","maze","rooms","exit","console","log","i","j","visited","getRandomInt","getDistance","startGame","handleUserInput","input","currentRoom","encounterType","encounter","updateMazeVisualization","includes","movePlayer","displayEncounter","direction","newX","newY","enterRoom","$","remove","append","renderMazeInConsole","max","Math","floor","random","pos1","pos2","abs","visualization","Array","join","room","empty","document","ready","ajax","url","type","dataType","success","keypress","e","which","this","val","toLowerCase","error","alert"],"mappings":"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","file":"main.js","sourcesContent":["// Global variables\nlet playerPosition = { x: 0, y: 0 };\nlet score = 0;\nconst directions = [\"north\", \"south\", \"east\", \"west\"];\n\nconst doors = {\n    north: '<span class=\"doors doors--north\"></span>',\n    east: '<span class=\"doors doors--east\"></span>',\n    south: '<span class=\"doors doors--south\"></span>',\n    west: '<span class=\"doors doors--west\"></span>'\n}\n\nconst roomEncounter = {\n    white_troll: '<img src=\"./dist/assets/monsters/white-troll.png\" alt=\"White troll\">',\n    green_troll: '<img src=\"./dist/assets/monsters/green-troll.png\" alt=\"Green troll\">',\n    yellow_troll: '<img src=\"./dist/assets/monsters/yellow-troll.png\" alt=\"Yellow troll\">',\n    gold: '<img src=\"./dist/assets/items/gold.png\" alt=\"Gold\">',\n    emerald: '<img src=\"./dist/assets/items/emerald.png\" alt=\"Emerald\">',\n    diamond: '<img src=\"./dist/assets/items/diamond.png\" alt=\"Diamond\">',\n}\n\n$(document).ready(function () {\n    $.ajax({\n        url: './maze-configs/maze-small.json',\n        type: 'GET',\n        dataType: 'json',\n        success: function (data) {\n            initializeMaze(data);\n            // Wait for user input\n            $(\"#userInput\").keypress(function (e) {\n                if (e.which === 13) { // Enter key pressed\n                    let input = $(this).val().toLowerCase();\n                    handleUserInput(input);\n                    // clear the input field\n\n                    $(this).val(\"\");\n                }\n            });\n        },\n        error: function () {\n            alert('Failed to load maze.');\n        }\n    });\n});\n\nfunction initializeMaze(data) {\n    mazeSize = data.mazeSize;\n    maze = data.rooms;\n    exit = data.exit;\n    console.log(maze);\n    console.log(mazeSize);\n    console.log(exit);\n\n    // Further maze initializations like marking rooms as unvisited can go here\n    for (let i = 0; i < mazeSize; i++) {\n        for (let j = 0; j < mazeSize; j++) {\n            maze[i][j].visited = false;\n        }\n    }\n\n    do {\n        playerPosition.x = getRandomInt(mazeSize);\n        playerPosition.y = getRandomInt(mazeSize);\n    } while (getDistance(playerPosition, exit) < 3);\n}\n\nfunction startGame() {\n    // Inform the player they can now start\n    console.log(\"Type 'start' to begin your adventure!\");\n}\n\nfunction handleUserInput(input) {\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n    const encounterType = currentRoom.encounter;\n\n    if (input === \"start\") {\n        console.log(\"You find yourself in a mysterious room. Which direction will you go? Type 'north', 'south', 'east', or 'west' to move.\");\n        updateMazeVisualization();\n    } else if (directions.includes(input)) {\n        movePlayer(input);\n    } else if (input === \"punch\" && encounterType && encounterType.includes(\"troll\")) {\n        console.log(\"You punched the troll! It's gone now.\");\n        currentRoom.encounter = null; // Remove the troll from the room\n        displayEncounter(currentRoom);\n    } else if (input === \"pick up\" && encounterType && (encounterType === \"gold\" || encounterType === \"emerald\" || encounterType === \"diamond\")) {\n        console.log(`You picked up the ${encounterType}!`);\n        score += 10;  // for example, you can adjust score increments as you like\n        currentRoom.encounter = null; // Remove the item from the room\n        displayEncounter(currentRoom);\n    } else {\n        console.log(\"Unknown command. Type 'north', 'south', 'east', or 'west' to move. If there's a troll, type 'punch' to fight it. If there's an item, type 'pick up' to collect it.\");\n    }\n}\n\nfunction movePlayer(direction) {\n    let newX = playerPosition.x;\n    let newY = playerPosition.y;\n    switch (direction) {\n        case \"north\":\n            newY--;\n            break;\n        case \"south\":\n            newY++;\n            break;\n        case \"east\":\n            newX++;\n            break;\n        case \"west\":\n            newX--;\n            break;\n    }\n\n    // Check if the move is valid\n    if (newX >= 0 && newY >= 0 && newX < mazeSize && newY < mazeSize && maze[playerPosition.y][playerPosition.x].doors[direction]) {\n        playerPosition.x = newX;\n        playerPosition.y = newY;\n        enterRoom();\n    } else {\n        console.log(\"You can't go that way!\");\n    }\n}\n\nfunction updateMazeVisualization() {\n    // Clear any existing door elements from the previous room\n    $('.doors').remove();\n\n    // Fetch the current room based on player's position\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n\n    // Check for available doors and inject them into the maze\n    for (const direction in currentRoom.doors) {\n        if (currentRoom.doors[direction]) {\n            $(\"#maze\").append(doors[direction]);\n        }\n    }\n}\n\nfunction enterRoom() {\n    // Check if this room has been visited before\n    if (!maze[playerPosition.y][playerPosition.x].visited) {\n        maze[playerPosition.y][playerPosition.x].visited = true;\n        // Handle encounters, items, etc. here\n\n        // Check if the player found the exit\n        if (playerPosition.x === exit.x && playerPosition.y === exit.y) {\n            console.log(\"Congratulations! You found the exit!\");\n            // End the game or restart, etc.\n        } else {\n            console.log(\"You've entered a new room. Which direction will you go next?\");\n            updateMazeVisualization();  // Update the visual representation of the maze\n        }\n    } else {\n        console.log(\"You've been in this room before. Choose another direction to explore.\");\n        updateMazeVisualization();  // Update the visual representation of the maze\n    }\n    renderMazeInConsole();\n\n    const currentRoom = maze[playerPosition.y][playerPosition.x];\n    displayEncounter(currentRoom);\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n\nfunction getDistance(pos1, pos2) {\n    return Math.abs(pos1.x - pos2.x) + Math.abs(pos1.y - pos2.y);\n}\n\nfunction renderMazeInConsole() {\n    let visualization = \"\";\n\n    for (let i = 0; i < mazeSize; i++) {\n        for (let j = 0; j < mazeSize; j++) {\n            if (j == 0) {\n                visualization += \"|\";\n            }\n\n            if (playerPosition.y == i && playerPosition.x == j) {\n                visualization += \" X \";\n            } else {\n                visualization += \"   \";\n            }\n\n            visualization += \"|\";\n        }\n        visualization += \"\\n\";\n        visualization += Array(mazeSize * 4 + 1).join(\"_\");\n        visualization += \"\\n\";\n    }\n\n    console.log(visualization);\n}\n\nfunction displayEncounter(room) {\n    // Clear any existing encounters from the previous room\n    $('#encounter').empty();\n\n    const encounterType = room.encounter;\n    if (encounterType && roomEncounter[encounterType]) {\n        $(\"#encounter\").append(roomEncounter[encounterType]);\n    }\n}"]}