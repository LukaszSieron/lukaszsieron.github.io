function enterRoomFromDirection(e){let n=null!==maze[playerPosition.y][playerPosition.x].encounter,o="";switch(e){case"north":o=n?"fromSouthEncounter":"arriveFromSouth";break;case"south":o=n?"fromNorthEncounter":"arriveFromNorth";break;case"east":o=n?"fromWestEncounter":"arriveFromWest";break;case"west":o=n?"fromEastEncounter":"arriveFromEast"}$(".hero").addClass(o),setTimeout(function(){n||($(".hero").removeClass(o),moveToCenter())},1e3),enterRoom()}function leaveRoomInDirection(e){let n="";switch(e){case"north":n="leaveToNorth";break;case"south":n="leaveToSouth";break;case"east":n="leaveToEast";break;case"west":n="leaveToWest"}$(".hero").addClass(n),setTimeout(function(){$(".hero").removeClass(n)},1e3)}function moveToCenter(){const e=$(".hero");var n,o={fromNorthEncounter:"toCenterFromNorth",fromSouthEncounter:"toCenterFromSouth",fromEastEncounter:"toCenterFromEast",fromWestEncounter:"toCenterFromWest"};for(n in o)if(e.hasClass(n)){e.addClass(o[n]).removeClass(n);break}setTimeout(function(){e.removeClass("toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest")},1e3)}let playerPosition={x:0,y:0},score=0,duringGame=!1,duringEncounter=!1,question=!1,previousAnnouncement=null;const directions=["north","south","east","west"];let levelSelectWrapper=$(".maze__level-select"),levelSelect=$("#level"),menuTrolls=$(".maze__menu-troll"),menuHeader=$(".menu__heading");const doors={north:'<span class="doors doors--north"></span>',east:'<span class="doors doors--east"></span>',south:'<span class="doors doors--south"></span>',west:'<span class="doors doors--west"></span>'},roomEncounter={white_troll:'<img class="enemy white_troll" src="./dist/assets/monsters/white-troll.png" alt="White troll">',green_troll:'<img class="enemy green_troll" src="./dist/assets/monsters/green-troll.png" alt="Green troll">',yellow_troll:'<img class="enemy yellow_troll" src="./dist/assets/monsters/yellow-troll.png" alt="Yellow troll">',gold:'<img class="reward gold" src="./dist/assets/items/gold.png" alt="Gold">',emerald:'<img class="reward emerald" src="./dist/assets/items/emerald.png" alt="Emerald">',diamond:'<img class="reward diamond" src="./dist/assets/items/diamond.png" alt="Diamond">',exit:'<img src="./dist/assets/exit.png" alt="Exit">'};function loadMaze(){var e=levelSelect.val();$.ajax({url:"./maze-configs/"+e+".json",type:"GET",dataType:"json",success:function(e){initializeMaze(e),updateMazeVisualization()},error:function(){alert("Failed to load maze.")}})}function hideMenuItems(){menuTrolls.hide(),levelSelectWrapper.hide(),menuHeader.hide()}function initializeMaze(e){mazeSize=e.mazeSize,maze=e.rooms,mazeEnemies=e.enemies,mazeTreasures=e.treasures,exit=getExitCoordinates(e);for(let n=0;n<mazeSize;n++)for(let e=0;e<mazeSize;e++)maze[n][e].visited=!1;for(;playerPosition.x=getRandomInt(mazeSize),playerPosition.y=getRandomInt(mazeSize),getDistance(playerPosition,exit)<3;);}function handleUserInput(e){"start"!==e||duringGame?"start"===e&&duringGame?(previousAnnouncement=$("#announcer").text(),announce("Do you want to return to the main menu? Type 'yes' or 'no'."),question=!0):question?"yes"===e?(duringGame=!1,duringEncounter=!1,question=!1,resetGame(),announce("Game has been reset. Type 'start' to begin again.")):"no"===e?(question=!1,announce(previousAnnouncement)):encounterAnnounce("Please answer with 'yes' or 'no'."):directions.includes(e)?duringEncounter?encounterAnnounce("You can't leave until you've dealt with the encounter!"):movePlayer(e):duringEncounter?handleEncounterInput(e):announce("Unknown command. Type 'help' for more instructions."):(duringGame=!0,hideMenuItems(),loadMaze(),announce("You are in a maze. Try to find the exit. Type 'help' for more instructions."))}function handleEncounterInput(e){var n,o,t=maze[playerPosition.y][playerPosition.x];let r=t.encounter;r&&((n={white_troll:{action:"punch",message:"You punched the white troll! It ran away."},green_troll:{action:"kick",message:"You kicked the green troll! Its gone now."},yellow_troll:{action:"throw",message:"You threw a stone at the yellow troll! Its scared away."},gold:{action:"collect",message:"You collected gold!"},emerald:{action:"grab",message:"You grabbed an emerald!"},diamond:{action:"pick",message:"You picked up a diamond!"},exit:{action:"exit",message:"You've found the exit! Congratulations."}})[o=(r="string"==typeof r?[r]:r)[0]]&&e===n[o].action?(announce(n[o].message),$("#encounter").find("img:not(.defeated)").first().addClass("defeated"),r.shift(),mazeTreasures.includes(o)&&(score+=10),(0===r.length?(t.encounter=null,duringEncounter=!1,moveToCenter(),openDoors):handleEncounter)()):encounterAnnounce("Wrong action! Try again."))}function movePlayer(e){let n=playerPosition.x,o=playerPosition.y;switch(e){case"north":o--;break;case"south":o++;break;case"east":n++;break;case"west":n--}canMoveTo(n,o,e)?(leaveRoomInDirection(e),setTimeout(function(){playerPosition.x=n,playerPosition.y=o,enterRoomFromDirection(e)},1e3)):announce("You can't go that way!")}function canMoveTo(e,n,o){return 0<=e&&0<=n&&e<mazeSize&&n<mazeSize&&maze[playerPosition.y][playerPosition.x].doors[o]}function updateMazeVisualization(){$(".doors").remove();var e=maze[playerPosition.y][playerPosition.x];for(const n in e.doors)e.doors[n]&&$("#maze").append(doors[n])}function enterRoom(){var e=maze[playerPosition.y][playerPosition.x];e.visited||null===e.encounter?(announce("Nothing in this room"),updateMazeVisualization()):(e.visited=!0,updateMazeVisualization(),"exit"===e.encounter?announce("Congratulations! You found the exit!"):(duringEncounter=!0,handleEncounter())),renderMazeInConsole(),displayEncounter(e)}function handleEncounter(e=null){var n=playerPosition.x,o=playerPosition.y;let t=maze[o][n].encounter;if(t&&0!==t.length){var r=(t="string"==typeof t?[t]:t).filter(e=>mazeEnemies.includes(e)),a=t.filter(e=>mazeTreasures.includes(e));if(0<r.length){var i=r[0],s=getRequiredActionForEncounter(i);if(null===e)return void announce(s.announcement);if(e!==s.requiredAction)return void announce("Wrong action! Try again.");$("#encounter ."+i).addClass("defeated"),r.shift()}if(0===r.length&&0<a.length){s=a[0],i=getRequiredActionForEncounter(s);if(null===e)return void announce(i.announcement);if(e!==i.requiredAction)return void announce("Wrong action! Try again.");$("#encounter ."+s).addClass("defeated"),a.shift(),score+=10}0===r.length&&0===a.length&&(maze[o][n].encounter=null,moveToCenter(),duringEncounter=!1,announce("Room cleared!"))}else announce("The room is empty. Nothing to do here.")}function getRequiredActionForEncounter(e){switch(e){case"diamond":return{announcement:"You've found a shining diamond! Type 'pick' to pick it up!",requiredAction:"pick"};case"white_troll":return{announcement:"You spotted a white troll! Type 'punch' to defeat it!",requiredAction:"punch"};case"emerald":return{announcement:"You've found a gleaming emerald! Type 'grab' to pick it up!",requiredAction:"grab"};case"green_troll":return{announcement:"You encountered a green troll! Type 'kick' to kick it away!",requiredAction:"kick"};case"yellow_troll":return{announcement:"Beware! A yellow troll is blocking your way! Type 'throw' to throw a stone at it!",requiredAction:"throw"};case"gold":return{announcement:"Golden treasures await! Type 'collect' to collect them!",requiredAction:"collect"};case"exit":return{announcement:"You've found the exit! Type 'exit' to leave.",requiredAction:"exit"};default:return{announcement:"Unknown encounter!",requiredAction:null}}}function getRandomInt(e){return Math.floor(Math.random()*e)}function getDistance(e,n){return Math.abs(e.x-n.x)+Math.abs(e.y-n.y)}function renderMazeInConsole(){let o="";for(let n=0;n<mazeSize;n++){for(let e=0;e<mazeSize;e++)0==e&&(o+="|"),playerPosition.y==n&&playerPosition.x==e?o+=" X ":o+="   ",o+="|";o=(o+="\n")+Array(4*mazeSize+1).join("_")+"\n"}console.log(o)}function displayEncounter(e){var n;$("#encounter").empty(),e.encounter&&(n=(e=Array.isArray(e.encounter)?e.encounter:[e.encounter]).filter(e=>mazeEnemies.includes(e)),e=e.filter(e=>mazeTreasures.includes(e)),n.forEach(e=>{roomEncounter[e]&&$("#encounter").append(roomEncounter[e])}),e.forEach(e=>{roomEncounter[e]&&$("#encounter").append(roomEncounter[e])}))}function getExitCoordinates(o){for(let n=0;n<o.mazeSize;n++)for(let e=0;e<o.mazeSize;e++)if("exit"===o.rooms[n][e].encounter)return{x:e,y:n};return null}function announce(e){$("#announcer").text(e)}function encounterAnnounce(e){$("#encounterAnnouncer").text(e)}function closeDoors(){$(".doors").addClass("closed")}function openDoors(){$(".doors").removeClass("closed")}function resetGame(){menuTrolls.show(),levelSelectWrapper.show(),menuHeader.show(),$(".hero").attr("class","hero"),$("#encounter").empty(),maze=null,playerPosition={x:0,y:0},score=0}$("#userInput").keypress(function(e){13===e.which&&(handleUserInput($(this).val().toLowerCase()),$(this).val(""))});
//# sourceMappingURL=main.js.map
