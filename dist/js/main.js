function movePlayer(e){let n=playerPosition.x,o=playerPosition.y;if(duringGame){switch(e){case"north":o--;break;case"south":o++;break;case"east":n++;break;case"west":n--}canMoveTo(n,o,e)?(leaveRoomInDirection(e),roomsVisited++,roomsTraveled.text(roomsVisited),setTimeout(function(){playerPosition.x=n,playerPosition.y=o,enterRoomFromDirection(e)},1e3)):announce("You can't go that way!")}else announce("You must start the game first!")}function canMoveTo(e,n,o){return 0<=e&&0<=n&&e<mazeSize&&n<mazeSize&&maze[playerPosition.y][playerPosition.x].doors[o]}function enterRoomFromDirection(e){let n=null!==maze[playerPosition.y][playerPosition.x].encounter,o="";switch(e){case"north":o=n?"fromSouthEncounter":"arriveFromSouth";break;case"south":o=n?"fromNorthEncounter":"arriveFromNorth";break;case"east":o=n?"fromWestEncounter":"arriveFromWest";break;case"west":o=n?"fromEastEncounter":"arriveFromEast"}$(".hero").addClass(o),setTimeout(function(){n||($(".hero").removeClass(o),moveToCenter())},1e3),enterRoom()}function leaveRoomInDirection(e){let n="";switch(e){case"north":n="leaveToNorth";break;case"south":n="leaveToSouth";break;case"east":n="leaveToEast";break;case"west":n="leaveToWest"}$(".hero").addClass(n),setTimeout(function(){$(".hero").removeClass(n)},1e3)}function moveToCenter(){const e=$(".hero");var n,o={fromNorthEncounter:"toCenterFromNorth",fromSouthEncounter:"toCenterFromSouth",fromEastEncounter:"toCenterFromEast",fromWestEncounter:"toCenterFromWest"};for(n in o)if(e.hasClass(n)){e.addClass(o[n]).removeClass(n);break}setTimeout(function(){e.removeClass("toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest")},1e3)}let mazeData=null,playerPosition={x:0,y:0},score=0,roomsVisited=0,duringGame=!1,duringEncounter=!1,question=!1,flagQuestion=!1,enemyTimer,previousAnnouncement=null;const directions=["north","south","east","west"];let levelSelectWrapper=$(".maze__level-select"),levelSelect=$("#level"),menuTrolls=$(".dancing-troll"),menuHeader=$(".menu__heading"),scoreTotal=$("#score"),roomsTraveled=$("#rooms");const doors={north:'<span class="doors doors--north"></span>',east:'<span class="doors doors--east"></span>',south:'<span class="doors doors--south"></span>',west:'<span class="doors doors--west"></span>'};async function loadMaze(){var e=levelSelect.val();try{var n=await(await fetch(`./maze-configs/${e}.json`)).json(),o=validateMaze(n);o.isValid?(initializeMaze(mazeData=n),updateMazeVisualization(),loadBackgroundImages(n.background)):alert("Invalid maze configuration: "+o.message)}catch(e){alert("Failed to load maze.")}}function loadBackgroundImages(n){for(let e=1;e<=4;e++)$("#maze").append(`<img class="maze__menu-background maze__menu-background--${e}" src="${n}" alt="Background">`)}function initializeMaze(e){mazeSize=e.mazeSize,maze=e.rooms,mazeEnemies=Object.keys(e.enemies),mazeTreasures=Object.keys(e.treasures),exit=getExitCoordinates(e),setInitialPlayerPosition(),clearInitialRoom()}function setInitialPlayerPosition(){for(;playerPosition.x=getRandomInt(mazeSize),playerPosition.y=getRandomInt(mazeSize),getDistance(playerPosition,exit)<3;);}function clearInitialRoom(){maze[playerPosition.y][playerPosition.x].encounter=null,maze[playerPosition.y][playerPosition.x].visited=!0}function handleUserInput(e){duringGame?!duringGame||duringEncounter||question||flagQuestion?duringEncounter?handleEncounterState(e):question?handleQuestionState(e):flagQuestion?handleFlagQuestionState(e):announce("Unknown command. Type 'help' for more instructions."):handleGameState(e):handleMenuState(e)}function handleMenuState(e){"start"===e?(duringGame=!0,resetGame(),hideMenuItems(),loadMaze(),announce("You are in a maze. Try to find the exit. Type 'help' for more instructions.")):"help"===e?toggleHelpModal():announce("Unknown command. Type 'help' for more instructions.")}function handleGameState(e){"start"===e?(previousAnnouncement=$("#announcer").text(),announce("Do you want to return to the main menu? Type 'yes' or 'no'."),question=!0):"flag"===e?(previousAnnouncement=$("#announcer").text(),announce("Insert flag for 100 points. Pick color, type 'red', 'green', 'yellow' or 'cancel' to cancel."),flagQuestion=!0):directions.includes(e)?movePlayer(e):announce("Unknown command. Type 'help' for more instructions.")}function handleEncounterState(e){handleEncounterInput(e)}function handleQuestionState(e){"yes"===e?(duringGame=!1,duringEncounter=!1,question=!1,resetGame(),announce("Game has been reset. Type 'start' to begin again.")):"no"===e?(question=!1,announce(previousAnnouncement)):encounterAnnounce("Please answer with 'yes' or 'no'.")}function handleFlagQuestionState(e){"red"===e||"green"===e||"yellow"===e?insertFlag(e):"cancel"===e?(flagQuestion=!1,announce(previousAnnouncement)):announce("Unknown flag color. Type 'red', 'green', 'yellow' or 'cancel' to cancel.")}function insertFlag(e){setFlagInCurrentRoom(e),updateScore(-100),displayFlag(e),flagQuestion=!1,encounterAnnounce(e+" flag set in this room!"),announce(previousAnnouncement)}function setFlagInCurrentRoom(e){maze[playerPosition.y][playerPosition.x].flag=e+"-flag"}function displayFlag(e){$("#maze").append(`<img class="flag" src="./dist/assets/flags/${e}-flag.jpg" alt="Flag">`)}function checkForFlag(){$(".flag").remove();var e=maze[playerPosition.y][playerPosition.x];e.flag&&$("#maze").append(`<img class="flag" src="./dist/assets/flags/${e.flag}.jpg" alt="Flag">`)}function toggleHelpModal(){$(".help-modal").toggleClass("hidden")}function startEnemyTimer(e){enemyTimer=setInterval(()=>{updateScore(-100*e),score<=0&&(stopEnemyTimer(),updateScore(0))},2e3)}function stopEnemyTimer(){clearInterval(enemyTimer)}function handleEncounterInput(n){if(duringEncounter){var o=maze[playerPosition.y][playerPosition.x];if(t=o.encounter){var t,r=(t=Array.isArray(t)?t:[t])[0];let e;mazeData.enemies[r]?e=mazeData.enemies[r]:mazeData.treasures[r]?e=mazeData.treasures[r]:"exit"===r&&(e={action:"exit",victory:"You've found the exit! Congratulations."}),n===e.action?(encounterAnnounce(e.victory),clearInterval(enemyTimer),$("#encounter").find("img:not(.defeated)").first().addClass("defeated"),t.shift(),0<(n=t.filter(e=>mazeEnemies.includes(e)).length)&&startEnemyTimer(n),mazeData.treasures[r]&&updateScore(mazeData.treasures[r].value),(0===t.length?(announce("Room cleared! Move on to the next room."),o.encounter=null,duringEncounter=!1,stopEnemyTimer(),moveToCenter(),openDoors):(stopEnemyTimer(),startEnemyTimer(n),handleEncounter))()):encounterAnnounce("Wrong action! Try again.")}}}function getEncounters(e){return Array.isArray(e.encounter)?e.encounter:[e.encounter]}function getCurrentRoom(){return maze[playerPosition.y][playerPosition.x]}function handleEncounter(){var e=getEncounters(getCurrentRoom())[0];let n="";mazeEnemies.includes(e)?n=mazeData.enemies[e].announcement:mazeTreasures.includes(e)?n=mazeData.treasures[e].announcement:"exit"===e&&(n="You've found the exit! Congratulations.",gameOver()),n&&announce(n)}function updateMazeVisualization(){$(".doors").remove();var e=maze[playerPosition.y][playerPosition.x]["doors"],n=$("#maze");for(const o in e)e[o]&&n.append(doors[o])}function displayEncounter(e){$("#encounter").empty(),e.encounter&&(Array.isArray(e.encounter)?e.encounter:[e.encounter]).forEach(e=>{let n="";mazeEnemies.includes(e)?n=`<div class="enemy--wrapper">${n=mazeData.enemies[e].image}</div>`:mazeTreasures.includes(e)?n=mazeData.treasures[e].image:"exit"===e&&(n='<img src="./dist/assets/exit.png" alt="Exit">'),$("#encounter").append(n)})}function enterRoom(){var e=maze[playerPosition.y][playerPosition.x];resetEncounterAnnouncer(),(e.visited||null===e.encounter?handleRepeatedEntry:handleFirstTimeEntry)(e),renderMazeInConsole(),displayEncounter(e)}function resetEncounterAnnouncer(){encounterAnnounce("")}function handleFirstTimeEntry(e){$(".flag").remove(),e.visited=!0,updateMazeVisualization(),duringEncounter=!0,setTimeout(()=>closeDoors(),1e3),handleEncounter(),setTimeout(()=>$(".enemy--wrapper").addClass("fight"),2e3);e=Array.isArray(e.encounter)?e.encounter.filter(e=>mazeEnemies.includes(e)).length:mazeEnemies.includes(e.encounter)?1:0;0<e&&startEnemyTimer(e)}function handleRepeatedEntry(e){announce("Nothing in this room"),updateMazeVisualization(),checkForFlag()}function toggleGameOverClasses(n){["hero","maze__score","maze__rooms"].forEach(e=>$("."+e).toggleClass("game-over",n))}function showMenuItems(){menuTrolls.show(),levelSelectWrapper.show(),menuHeader.show()}function removeBackgroundImages(){$(".maze__menu-background").not(".dancing-troll").remove()}function gameOver(){duringGame=!1,duringEncounter=!1,showMenuItems(),toggleGameOverClasses(!0),removeBackgroundImages(),encounterAnnounce("Type start to play again.")}function resetGame(){showMenuItems(),$(".doors").remove(),toggleGameOverClasses(!1),removeBackgroundImages(),$(".hero").attr("class","hero"),$("#encounter").empty(),resetEncounterAnnouncer(),maze=null,mazeData=null,playerPosition={x:0,y:0},score=0,roomsVisited=0,scoreTotal.text(score),roomsTraveled.text(roomsVisited)}function validateMaze(e){var n={isValid:!0,message:""};return hasSingleExit(e)?validateDoorIntegrity(e)?isMazeSolvable(e)||(n.isValid=!1,n.message="The maze is not solvable from every room."):(n.isValid=!1,n.message="Some rooms have doors that lead to nowhere."):(n.isValid=!1,n.message="Maze must have exactly one exit."),n}function hasSingleExit(e){let o=0;var t=[];for(let n=0;n<e.rooms.length;n++){var r=e.rooms[n];for(let e=0;e<r.length;e++)"exit"===r[e].encounter&&(o++,t.push(`row ${n+1}, column `+(e+1)))}return 1!==o&&console.log(`Invalid number of exits: ${o}. Exits found at ${t.join(", ")}.`),1===o}function validateDoorIntegrity(o){var t=o.rooms.length,r=o.rooms[0].length;for(let n=0;n<t;n++)for(let e=0;e<r;e++){var a=o.rooms[n][e].doors;if(a.north&&(0===n||!o.rooms[n-1][e].doors.south))return console.log(`Integrity failed at row ${n+1}, column ${e+1}: Door to the north doesn't match.`),!1;if(a.south&&(n===t-1||!o.rooms[n+1][e].doors.north))return console.log(`Integrity failed at row ${n+1}, column ${e+1}: Door to the south doesn't match.`),!1;if(a.east&&(e===r-1||!o.rooms[n][e+1].doors.west))return console.log(`Integrity failed at row ${n+1}, column ${e+1}: Door to the east doesn't match.`),!1;if(a.west&&(0===e||!o.rooms[n][e-1].doors.east))return console.log(`Integrity failed at row ${n+1}, column ${e+1}: Door to the west doesn't match.`),!1}return!0}function isMazeSolvable(a){const s=a.rooms.length,i=a.rooms[0].length;let l=null;for(let n=0;n<s;n++){for(let e=0;e<i;e++)if("exit"===a.rooms[n][e].encounter){l={row:n,col:e};break}if(l)break}for(let n=0;n<s;n++)for(let e=0;e<i;e++){var o=Array.from({length:s},()=>Array(i).fill(!1));if(!function e(n,o,t){if(n<0||n>=s||o<0||o>=i||t[n][o])return!1;if(n===l.row&&o===l.col)return!0;t[n][o]=!0;var r=a.rooms[n][o].doors;return r.north&&e(n-1,o,t)||r.south&&e(n+1,o,t)||r.east&&e(n,o+1,t)||r.west&&e(n,o-1,t)}(n,e,o))return console.log(`Maze is not solvable from row ${n+1}, column ${e+1}.`),!1}return!0}function announce(e){$("#announcer").text(e)}function encounterAnnounce(e){$("#encounterAnnouncer").text(e)}function closeDoors(){$(".doors").addClass("closed")}function openDoors(){$(".doors").removeClass("closed")}function getRandomInt(e){return Math.floor(Math.random()*e)}function getDistance(e,n){return Math.abs(e.x-n.x)+Math.abs(e.y-n.y)}function hideMenuItems(){menuTrolls.hide(),levelSelectWrapper.hide(),menuHeader.hide()}function updateScore(e){(score+=e)<0&&(score=0),scoreTotal.text(score)}function getExitCoordinates(o){for(let n=0;n<o.mazeSize;n++)for(let e=0;e<o.mazeSize;e++)if("exit"===o.rooms[n][e].encounter)return{x:e,y:n};return null}function renderMazeInConsole(){let o="";for(let n=0;n<mazeSize;n++){for(let e=0;e<mazeSize;e++)0==e&&(o+="|"),playerPosition.y==n&&playerPosition.x==e?o+=" X ":o+="   ",o+="|";o=(o+="\n")+Array(4*mazeSize+1).join("_")+"\n"}console.log(o)}$("#closeModal").on("click",toggleHelpModal),$("#userInput").keypress(function(e){13===e.which&&(handleUserInput($(this).val().toLowerCase()),$(this).val(""))});
//# sourceMappingURL=main.js.map
