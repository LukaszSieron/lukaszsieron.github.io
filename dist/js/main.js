let playerPosition={x:0,y:0},score=0;const directions=["north","south","east","west"],doors={north:'<span class="doors doors--north"></span>',east:'<span class="doors doors--east"></span>',south:'<span class="doors doors--south"></span>',west:'<span class="doors doors--west"></span>'},roomEncounter={white_troll:'<img src="./dist/assets/monsters/white-troll.png" alt="White troll">',green_troll:'<img src="./dist/assets/monsters/green-troll.png" alt="Green troll">',yellow_troll:'<img src="./dist/assets/monsters/yellow-troll.png" alt="Yellow troll">',gold:'<img src="./dist/assets/items/gold.png" alt="Gold">',emerald:'<img src="./dist/assets/items/emerald.png" alt="Emerald">',diamond:'<img src="./dist/assets/items/diamond.png" alt="Diamond">',exit:'<img src="./dist/assets/exit.png" alt="Exit">'};function initializeMaze(e){mazeSize=e.mazeSize,maze=e.rooms,exit=getExitCoordinates(e),console.log(maze),console.log(mazeSize),console.log(exit);for(let o=0;o<mazeSize;o++)for(let e=0;e<mazeSize;e++)maze[o][e].visited=!1;for(;playerPosition.x=getRandomInt(mazeSize),playerPosition.y=getRandomInt(mazeSize),getDistance(playerPosition,exit)<3;);}function startGame(){console.log("Type 'start' to begin your adventure!")}function handleUserInput(e){var o=maze[playerPosition.y][playerPosition.x],t=o.encounter;"start"===e?(console.log("You find yourself in a mysterious room. Which direction will you go? Type 'north', 'south', 'east', or 'west' to move."),updateMazeVisualization()):directions.includes(e)?movePlayer(e):"punch"===e&&t&&t.includes("troll")?(console.log("You punched the troll! It's gone now."),o.encounter=null,displayEncounter(o)):"pick up"!==e||!t||"gold"!==t&&"emerald"!==t&&"diamond"!==t?console.log("Unknown command. Type 'north', 'south', 'east', or 'west' to move. If there's a troll, type 'punch' to fight it. If there's an item, type 'pick up' to collect it."):(console.log(`You picked up the ${t}!`),score+=10,o.encounter=null,displayEncounter(o))}function movePlayer(e){let o=playerPosition.x,t=playerPosition.y;switch(e){case"north":t--;break;case"south":t++;break;case"east":o++;break;case"west":o--}0<=o&&0<=t&&o<mazeSize&&t<mazeSize&&maze[playerPosition.y][playerPosition.x].doors[e]?(playerPosition.x=o,playerPosition.y=t,enterRoom()):console.log("You can't go that way!")}function updateMazeVisualization(){$(".doors").remove();var e=maze[playerPosition.y][playerPosition.x];for(const o in e.doors)e.doors[o]&&$("#maze").append(doors[o])}function enterRoom(){var e=maze[playerPosition.y][playerPosition.x];e.visited?(console.log("You've been in this room before. Choose another direction to explore."),updateMazeVisualization()):(e.visited=!0,updateMazeVisualization(),"exit"===e.encounter?console.log("Congratulations! You found the exit!"):console.log("You've entered a new room. Which direction will you go next?")),renderMazeInConsole(),displayEncounter(e)}function getRandomInt(e){return Math.floor(Math.random()*e)}function getDistance(e,o){return Math.abs(e.x-o.x)+Math.abs(e.y-o.y)}function renderMazeInConsole(){let t="";for(let o=0;o<mazeSize;o++){for(let e=0;e<mazeSize;e++)0==e&&(t+="|"),playerPosition.y==o&&playerPosition.x==e?t+=" X ":t+="   ",t+="|";t=(t+="\n")+Array(4*mazeSize+1).join("_")+"\n"}console.log(t)}function displayEncounter(e){$("#encounter").empty();e=e.encounter;e&&roomEncounter[e]&&$("#encounter").append(roomEncounter[e])}function getExitCoordinates(t){for(let o=0;o<t.mazeSize;o++)for(let e=0;e<t.mazeSize;e++)if("exit"===t.rooms[o][e].encounter)return{x:e,y:o};return null}$(document).ready(function(){$.ajax({url:"./maze-configs/maze-small.json",type:"GET",dataType:"json",success:function(e){initializeMaze(e),$("#userInput").keypress(function(e){13===e.which&&(handleUserInput($(this).val().toLowerCase()),$(this).val(""))})},error:function(){alert("Failed to load maze.")}})});
//# sourceMappingURL=main.js.map
