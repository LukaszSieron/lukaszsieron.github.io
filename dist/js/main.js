let playerPosition={x:0,y:0},score=0;const directions=["north","south","east","west"],doors={north:'<span class="doors doors--north"></span>',east:'<span class="doors doors--east"></span>',south:'<span class="doors doors--south"></span>',west:'<span class="doors doors--west"></span>'},roomEncounter={white_troll:'<img src="./dist/assets/monsters/white-troll.png" alt="White troll">',green_troll:'<img src="./dist/assets/monsters/green-troll.png" alt="Green troll">',yellow_troll:'<img src="./dist/assets/monsters/yellow-troll.png" alt="Yellow troll">',gold:'<img src="./dist/assets/items/gold.png" alt="Gold">',emerald:'<img src="./dist/assets/items/emerald.png" alt="Emerald">',diamond:'<img src="./dist/assets/items/diamond.png" alt="Diamond">'};function initializeMaze(o){mazeSize=o.mazeSize,maze=o.rooms,exit=o.exit,console.log(maze),console.log(mazeSize),console.log(exit);for(let e=0;e<mazeSize;e++)for(let o=0;o<mazeSize;o++)maze[e][o].visited=!1;for(;playerPosition.x=getRandomInt(mazeSize),playerPosition.y=getRandomInt(mazeSize),getDistance(playerPosition,exit)<3;);}function startGame(){console.log("Type 'start' to begin your adventure!")}function handleUserInput(o){var e=maze[playerPosition.y][playerPosition.x],t=e.encounter;"start"===o?(console.log("You find yourself in a mysterious room. Which direction will you go? Type 'north', 'south', 'east', or 'west' to move."),updateMazeVisualization()):directions.includes(o)?movePlayer(o):"punch"===o&&t&&t.includes("troll")?(console.log("You punched the troll! It's gone now."),e.encounter=null,displayEncounter(e)):"pick up"!==o||!t||"gold"!==t&&"emerald"!==t&&"diamond"!==t?console.log("Unknown command. Type 'north', 'south', 'east', or 'west' to move. If there's a troll, type 'punch' to fight it. If there's an item, type 'pick up' to collect it."):(console.log(`You picked up the ${t}!`),score+=10,e.encounter=null,displayEncounter(e))}function movePlayer(o){let e=playerPosition.x,t=playerPosition.y;switch(o){case"north":t--;break;case"south":t++;break;case"east":e++;break;case"west":e--}0<=e&&0<=t&&e<mazeSize&&t<mazeSize&&maze[playerPosition.y][playerPosition.x].doors[o]?(playerPosition.x=e,playerPosition.y=t,enterRoom()):console.log("You can't go that way!")}function updateMazeVisualization(){$(".doors").remove();var o=maze[playerPosition.y][playerPosition.x];for(const e in o.doors)o.doors[e]&&$("#maze").append(doors[e])}function enterRoom(){maze[playerPosition.y][playerPosition.x].visited?(console.log("You've been in this room before. Choose another direction to explore."),updateMazeVisualization()):(maze[playerPosition.y][playerPosition.x].visited=!0,playerPosition.x===exit.x&&playerPosition.y===exit.y?console.log("Congratulations! You found the exit!"):(console.log("You've entered a new room. Which direction will you go next?"),updateMazeVisualization())),renderMazeInConsole(),displayEncounter(maze[playerPosition.y][playerPosition.x])}function getRandomInt(o){return Math.floor(Math.random()*o)}function getDistance(o,e){return Math.abs(o.x-e.x)+Math.abs(o.y-e.y)}function renderMazeInConsole(){let t="";for(let e=0;e<mazeSize;e++){for(let o=0;o<mazeSize;o++)0==o&&(t+="|"),playerPosition.y==e&&playerPosition.x==o?t+=" X ":t+="   ",t+="|";t=(t+="\n")+Array(4*mazeSize+1).join("_")+"\n"}console.log(t)}function displayEncounter(o){$("#encounter").empty();o=o.encounter;o&&roomEncounter[o]&&$("#encounter").append(roomEncounter[o])}$(document).ready(function(){$.ajax({url:"./maze-configs/maze-small.json",type:"GET",dataType:"json",success:function(o){initializeMaze(o),$("#userInput").keypress(function(o){13===o.which&&(handleUserInput($(this).val().toLowerCase()),$(this).val(""))})},error:function(){alert("Failed to load maze.")}})});
//# sourceMappingURL=main.js.map
