let playerPosition={x:0,y:0},score=0,duringGame=!1,duringEncounter=!1,question=!1;const directions=["north","south","east","west"];let levelSelectWrapper=$(".maze__level-select"),levelSelect=$("#level"),menuTrolls=$(".maze__menu-troll"),menuHeader=$(".menu__heading");const doors={north:'<span class="doors doors--north"></span>',east:'<span class="doors doors--east"></span>',south:'<span class="doors doors--south"></span>',west:'<span class="doors doors--west"></span>'},roomEncounter={white_troll:'<img src="./dist/assets/monsters/white-troll.png" alt="White troll">',green_troll:'<img src="./dist/assets/monsters/green-troll.png" alt="Green troll">',yellow_troll:'<img src="./dist/assets/monsters/yellow-troll.png" alt="Yellow troll">',gold:'<img src="./dist/assets/items/gold.png" alt="Gold">',emerald:'<img src="./dist/assets/items/emerald.png" alt="Emerald">',diamond:'<img src="./dist/assets/items/diamond.png" alt="Diamond">',exit:'<img src="./dist/assets/exit.png" alt="Exit">'};function loadMaze(){var e=levelSelect.val();$.ajax({url:"./maze-configs/"+e+".json",type:"GET",dataType:"json",success:function(e){initializeMaze(e),updateMazeVisualization()},error:function(){alert("Failed to load maze.")}})}function hideMenuItems(){menuTrolls.hide(),levelSelectWrapper.hide(),menuHeader.hide()}function initializeMaze(e){mazeSize=e.mazeSize,maze=e.rooms,exit=getExitCoordinates(e);for(let o=0;o<mazeSize;o++)for(let e=0;e<mazeSize;e++)maze[o][e].visited=!1;for(;playerPosition.x=getRandomInt(mazeSize),playerPosition.y=getRandomInt(mazeSize),getDistance(playerPosition,exit)<3;);}function handleUserInput(e){"start"!==e||duringGame?"start"===e&&duringGame?(announce("Do you want to return to main menu? Type 'yes' or 'no'."),question=!0):directions.includes(e)?movePlayer(e):duringEncounter?handleEncounterInput(e):announce("Unknown command. Type 'help' for more instructions."):(duringGame=!0,hideMenuItems(),loadMaze())}function handleEncounterInput(e){var o=maze[playerPosition.y][playerPosition.x],t=o.encounter,n={white_troll:{action:"punch",message:"You punched the white troll! It ran away."},green_troll:{action:"kick",message:"You kicked the green troll! Its gone now."},yellow_troll:{action:"throw",message:"You threw a stone at the yellow troll! Its scared away."},gold:{action:"collect",message:"You collected gold!"},emerald:{action:"grab",message:"You grabbed an emerald!"},diamond:{action:"pick",message:"You picked up a diamond!"},exit:{action:"exit",message:"You've found the exit! Congratulations."}};n[t]&&e===n[t].action?(announce(n[t].message),o.encounter=null,score+=10,duringEncounter=!1,moveToCenter()):announce("Wrong action! Try again.")}function movePlayer(e){let o=playerPosition.x,t=playerPosition.y;switch(e){case"north":t--;break;case"south":t++;break;case"east":o++;break;case"west":o--}canMoveTo(o,t,e)?(leaveRoomInDirection(e),setTimeout(function(){playerPosition.x=o,playerPosition.y=t,enterRoomFromDirection(e)},1e3)):announce("You can't go that way!")}function canMoveTo(e,o,t){return 0<=e&&0<=o&&e<mazeSize&&o<mazeSize&&maze[playerPosition.y][playerPosition.x].doors[t]}function updateMazeVisualization(){$(".doors").remove();var e=maze[playerPosition.y][playerPosition.x];for(const o in e.doors)e.doors[o]&&$("#maze").append(doors[o])}function enterRoom(){var e=maze[playerPosition.y][playerPosition.x];e.visited||null===e.encounter?(announce("Nothing in this room"),updateMazeVisualization()):(e.visited=!0,updateMazeVisualization(),"exit"===e.encounter?announce("Congratulations! You found the exit!"):(duringEncounter=!0,handleEncounter())),renderMazeInConsole(),displayEncounter(e)}function handleEncounter(t=null){var n=playerPosition.x,a=playerPosition.y,r=maze[a][n].encounter;if(r){let e=null,o=null;switch(r){case"diamond":o="You've found a shining diamond! Type 'pick' to pick it up!",e="pick";break;case"white_troll":o="You spotted a white troll! Type 'punch' to defeat it!",e="punch";break;case"emerald":o="You've found a gleaming emerald! Type 'grab' to pick it up!",e="grab";break;case"green_troll":o="You encountered a green troll! Type 'kick' to kick it away!",e="kick";break;case"yellow_troll":o="Beware! A yellow troll is blocking your way! Type 'throw' to throw a stone at it!",e="throw";break;case"gold":o="Golden treasures await! Type 'collect' to collect them!",e="collect";break;case"exit":o="You've found the exit! Type 'exit' to leave.",e="exit";break;default:o="Unknown encounter!"}if(null===t)announce(o);else if(t===e){switch(r){case"diamond":case"emerald":case"gold":score+=10}maze[a][n].encounter=null,moveToCenter(),duringEncounter=!1,announce(`Successfully handled the ${r}.`)}else announce("Wrong action! Try again.")}else announce("The room is empty. Nothing to do here.")}function getRandomInt(e){return Math.floor(Math.random()*e)}function getDistance(e,o){return Math.abs(e.x-o.x)+Math.abs(e.y-o.y)}function renderMazeInConsole(){let t="";for(let o=0;o<mazeSize;o++){for(let e=0;e<mazeSize;e++)0==e&&(t+="|"),playerPosition.y==o&&playerPosition.x==e?t+=" X ":t+="   ",t+="|";t=(t+="\n")+Array(4*mazeSize+1).join("_")+"\n"}console.log(t)}function displayEncounter(e){$("#encounter").empty();e=e.encounter;e&&roomEncounter[e]&&$("#encounter").append(roomEncounter[e])}function getExitCoordinates(t){for(let o=0;o<t.mazeSize;o++)for(let e=0;e<t.mazeSize;e++)if("exit"===t.rooms[o][e].encounter)return{x:e,y:o};return null}function announce(e){$("#announcer").text(e)}function enterRoomFromDirection(e){let o=null!==maze[playerPosition.y][playerPosition.x].encounter,t="";switch(e){case"north":t=o?"fromSouthEncounter":"arriveFromSouth";break;case"south":t=o?"fromNorthEncounter":"arriveFromNorth";break;case"east":t=o?"fromWestEncounter":"arriveFromWest";break;case"west":t=o?"fromEastEncounter":"arriveFromEast"}$(".hero").addClass(t),setTimeout(function(){o||($(".hero").removeClass(t),moveToCenter())},1e3),enterRoom()}function leaveRoomInDirection(e){let o="";switch(e){case"north":o="leaveToNorth";break;case"south":o="leaveToSouth";break;case"east":o="leaveToEast";break;case"west":o="leaveToWest"}$(".hero").addClass(o),setTimeout(function(){$(".hero").removeClass(o)},1e3)}function moveToCenter(){const e=$(".hero");var o,t={fromNorthEncounter:"toCenterFromNorth",fromSouthEncounter:"toCenterFromSouth",fromEastEncounter:"toCenterFromEast",fromWestEncounter:"toCenterFromWest"};for(o in t)if(e.hasClass(o)){e.addClass(t[o]).removeClass(o);break}setTimeout(function(){e.removeClass("toCenterFromNorth toCenterFromSouth toCenterFromEast toCenterFromWest")},1e3)}$("#userInput").keypress(function(e){13===e.which&&(handleUserInput($(this).val().toLowerCase()),$(this).val(""))});
//# sourceMappingURL=main.js.map
